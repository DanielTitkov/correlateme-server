// Code generated by entc, DO NOT EDIT.

package correlation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Coef applies equality check predicate on the "coef" field. It's identical to CoefEQ.
func Coef(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoef), v))
	})
}

// P applies equality check predicate on the "p" field. It's identical to PEQ.
func P(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldP), v))
	})
}

// R2 applies equality check predicate on the "r2" field. It's identical to R2EQ.
func R2(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldR2), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// CoefEQ applies the EQ predicate on the "coef" field.
func CoefEQ(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoef), v))
	})
}

// CoefNEQ applies the NEQ predicate on the "coef" field.
func CoefNEQ(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoef), v))
	})
}

// CoefIn applies the In predicate on the "coef" field.
func CoefIn(vs ...float64) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoef), v...))
	})
}

// CoefNotIn applies the NotIn predicate on the "coef" field.
func CoefNotIn(vs ...float64) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoef), v...))
	})
}

// CoefGT applies the GT predicate on the "coef" field.
func CoefGT(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoef), v))
	})
}

// CoefGTE applies the GTE predicate on the "coef" field.
func CoefGTE(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoef), v))
	})
}

// CoefLT applies the LT predicate on the "coef" field.
func CoefLT(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoef), v))
	})
}

// CoefLTE applies the LTE predicate on the "coef" field.
func CoefLTE(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoef), v))
	})
}

// PEQ applies the EQ predicate on the "p" field.
func PEQ(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldP), v))
	})
}

// PNEQ applies the NEQ predicate on the "p" field.
func PNEQ(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldP), v))
	})
}

// PIn applies the In predicate on the "p" field.
func PIn(vs ...float64) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldP), v...))
	})
}

// PNotIn applies the NotIn predicate on the "p" field.
func PNotIn(vs ...float64) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldP), v...))
	})
}

// PGT applies the GT predicate on the "p" field.
func PGT(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldP), v))
	})
}

// PGTE applies the GTE predicate on the "p" field.
func PGTE(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldP), v))
	})
}

// PLT applies the LT predicate on the "p" field.
func PLT(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldP), v))
	})
}

// PLTE applies the LTE predicate on the "p" field.
func PLTE(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldP), v))
	})
}

// R2EQ applies the EQ predicate on the "r2" field.
func R2EQ(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldR2), v))
	})
}

// R2NEQ applies the NEQ predicate on the "r2" field.
func R2NEQ(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldR2), v))
	})
}

// R2In applies the In predicate on the "r2" field.
func R2In(vs ...float64) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldR2), v...))
	})
}

// R2NotIn applies the NotIn predicate on the "r2" field.
func R2NotIn(vs ...float64) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldR2), v...))
	})
}

// R2GT applies the GT predicate on the "r2" field.
func R2GT(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldR2), v))
	})
}

// R2GTE applies the GTE predicate on the "r2" field.
func R2GTE(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldR2), v))
	})
}

// R2LT applies the LT predicate on the "r2" field.
func R2LT(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldR2), v))
	})
}

// R2LTE applies the LTE predicate on the "r2" field.
func R2LTE(v float64) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldR2), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Correlation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Correlation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// HasLeft applies the HasEdge predicate on the "left" edge.
func HasLeft() predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LeftTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeftTable, LeftColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeftWith applies the HasEdge predicate on the "left" edge with a given conditions (other predicates).
func HasLeftWith(preds ...predicate.Dataset) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LeftInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeftTable, LeftColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRight applies the HasEdge predicate on the "right" edge.
func HasRight() predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RightTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RightTable, RightColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRightWith applies the HasEdge predicate on the "right" edge with a given conditions (other predicates).
func HasRightWith(preds ...predicate.Dataset) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RightInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RightTable, RightColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Correlation) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Correlation) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Correlation) predicate.Correlation {
	return predicate.Correlation(func(s *sql.Selector) {
		p(s.Not())
	})
}
