// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dictionary"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dictionaryentry"
)

// DictionaryEntry is the model entity for the DictionaryEntry schema.
type DictionaryEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DictionaryEntryQuery when eager-loading is set.
	Edges              DictionaryEntryEdges `json:"edges"`
	dictionary_entries *int
}

// DictionaryEntryEdges holds the relations/edges for other nodes in the graph.
type DictionaryEntryEdges struct {
	// Dictionary holds the value of the dictionary edge.
	Dictionary *Dictionary `json:"dictionary,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DictionaryOrErr returns the Dictionary value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DictionaryEntryEdges) DictionaryOrErr() (*Dictionary, error) {
	if e.loadedTypes[0] {
		if e.Dictionary == nil {
			// The edge dictionary was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dictionary.Label}
		}
		return e.Dictionary, nil
	}
	return nil, &NotLoadedError{edge: "dictionary"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DictionaryEntry) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dictionaryentry.FieldID:
			values[i] = &sql.NullInt64{}
		case dictionaryentry.FieldCode, dictionaryentry.FieldDescription:
			values[i] = &sql.NullString{}
		case dictionaryentry.ForeignKeys[0]: // dictionary_entries
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type DictionaryEntry", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DictionaryEntry fields.
func (de *DictionaryEntry) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dictionaryentry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			de.ID = int(value.Int64)
		case dictionaryentry.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				de.Code = value.String
			}
		case dictionaryentry.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				de.Description = value.String
			}
		case dictionaryentry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field dictionary_entries", value)
			} else if value.Valid {
				de.dictionary_entries = new(int)
				*de.dictionary_entries = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDictionary queries the "dictionary" edge of the DictionaryEntry entity.
func (de *DictionaryEntry) QueryDictionary() *DictionaryQuery {
	return (&DictionaryEntryClient{config: de.config}).QueryDictionary(de)
}

// Update returns a builder for updating this DictionaryEntry.
// Note that you need to call DictionaryEntry.Unwrap() before calling this method if this DictionaryEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (de *DictionaryEntry) Update() *DictionaryEntryUpdateOne {
	return (&DictionaryEntryClient{config: de.config}).UpdateOne(de)
}

// Unwrap unwraps the DictionaryEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (de *DictionaryEntry) Unwrap() *DictionaryEntry {
	tx, ok := de.config.driver.(*txDriver)
	if !ok {
		panic("ent: DictionaryEntry is not a transactional entity")
	}
	de.config.driver = tx.drv
	return de
}

// String implements the fmt.Stringer.
func (de *DictionaryEntry) String() string {
	var builder strings.Builder
	builder.WriteString("DictionaryEntry(")
	builder.WriteString(fmt.Sprintf("id=%v", de.ID))
	builder.WriteString(", code=")
	builder.WriteString(de.Code)
	builder.WriteString(", description=")
	builder.WriteString(de.Description)
	builder.WriteByte(')')
	return builder.String()
}

// DictionaryEntries is a parsable slice of DictionaryEntry.
type DictionaryEntries []*DictionaryEntry

func (de DictionaryEntries) config(cfg config) {
	for _i := range de {
		de[_i].config = cfg
	}
}
