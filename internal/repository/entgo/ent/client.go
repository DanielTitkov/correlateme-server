// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/migrate"

	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/anomaly"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjob"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjobinstance"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Anomaly is the client for interacting with the Anomaly builders.
	Anomaly *AnomalyClient
	// DetectionJob is the client for interacting with the DetectionJob builders.
	DetectionJob *DetectionJobClient
	// DetectionJobInstance is the client for interacting with the DetectionJobInstance builders.
	DetectionJobInstance *DetectionJobInstanceClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Anomaly = NewAnomalyClient(c.config)
	c.DetectionJob = NewDetectionJobClient(c.config)
	c.DetectionJobInstance = NewDetectionJobInstanceClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Anomaly:              NewAnomalyClient(cfg),
		DetectionJob:         NewDetectionJobClient(cfg),
		DetectionJobInstance: NewDetectionJobInstanceClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:               cfg,
		Anomaly:              NewAnomalyClient(cfg),
		DetectionJob:         NewDetectionJobClient(cfg),
		DetectionJobInstance: NewDetectionJobInstanceClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Anomaly.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Anomaly.Use(hooks...)
	c.DetectionJob.Use(hooks...)
	c.DetectionJobInstance.Use(hooks...)
	c.User.Use(hooks...)
}

// AnomalyClient is a client for the Anomaly schema.
type AnomalyClient struct {
	config
}

// NewAnomalyClient returns a client for the Anomaly from the given config.
func NewAnomalyClient(c config) *AnomalyClient {
	return &AnomalyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `anomaly.Hooks(f(g(h())))`.
func (c *AnomalyClient) Use(hooks ...Hook) {
	c.hooks.Anomaly = append(c.hooks.Anomaly, hooks...)
}

// Create returns a create builder for Anomaly.
func (c *AnomalyClient) Create() *AnomalyCreate {
	mutation := newAnomalyMutation(c.config, OpCreate)
	return &AnomalyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Anomaly entities.
func (c *AnomalyClient) CreateBulk(builders ...*AnomalyCreate) *AnomalyCreateBulk {
	return &AnomalyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Anomaly.
func (c *AnomalyClient) Update() *AnomalyUpdate {
	mutation := newAnomalyMutation(c.config, OpUpdate)
	return &AnomalyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnomalyClient) UpdateOne(a *Anomaly) *AnomalyUpdateOne {
	mutation := newAnomalyMutation(c.config, OpUpdateOne, withAnomaly(a))
	return &AnomalyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnomalyClient) UpdateOneID(id int) *AnomalyUpdateOne {
	mutation := newAnomalyMutation(c.config, OpUpdateOne, withAnomalyID(id))
	return &AnomalyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Anomaly.
func (c *AnomalyClient) Delete() *AnomalyDelete {
	mutation := newAnomalyMutation(c.config, OpDelete)
	return &AnomalyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AnomalyClient) DeleteOne(a *Anomaly) *AnomalyDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AnomalyClient) DeleteOneID(id int) *AnomalyDeleteOne {
	builder := c.Delete().Where(anomaly.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnomalyDeleteOne{builder}
}

// Query returns a query builder for Anomaly.
func (c *AnomalyClient) Query() *AnomalyQuery {
	return &AnomalyQuery{config: c.config}
}

// Get returns a Anomaly entity by its id.
func (c *AnomalyClient) Get(ctx context.Context, id int) (*Anomaly, error) {
	return c.Query().Where(anomaly.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnomalyClient) GetX(ctx context.Context, id int) *Anomaly {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDetectionJobInstance queries the detection_job_instance edge of a Anomaly.
func (c *AnomalyClient) QueryDetectionJobInstance(a *Anomaly) *DetectionJobInstanceQuery {
	query := &DetectionJobInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(anomaly.Table, anomaly.FieldID, id),
			sqlgraph.To(detectionjobinstance.Table, detectionjobinstance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, anomaly.DetectionJobInstanceTable, anomaly.DetectionJobInstanceColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AnomalyClient) Hooks() []Hook {
	return c.hooks.Anomaly
}

// DetectionJobClient is a client for the DetectionJob schema.
type DetectionJobClient struct {
	config
}

// NewDetectionJobClient returns a client for the DetectionJob from the given config.
func NewDetectionJobClient(c config) *DetectionJobClient {
	return &DetectionJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `detectionjob.Hooks(f(g(h())))`.
func (c *DetectionJobClient) Use(hooks ...Hook) {
	c.hooks.DetectionJob = append(c.hooks.DetectionJob, hooks...)
}

// Create returns a create builder for DetectionJob.
func (c *DetectionJobClient) Create() *DetectionJobCreate {
	mutation := newDetectionJobMutation(c.config, OpCreate)
	return &DetectionJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DetectionJob entities.
func (c *DetectionJobClient) CreateBulk(builders ...*DetectionJobCreate) *DetectionJobCreateBulk {
	return &DetectionJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DetectionJob.
func (c *DetectionJobClient) Update() *DetectionJobUpdate {
	mutation := newDetectionJobMutation(c.config, OpUpdate)
	return &DetectionJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DetectionJobClient) UpdateOne(dj *DetectionJob) *DetectionJobUpdateOne {
	mutation := newDetectionJobMutation(c.config, OpUpdateOne, withDetectionJob(dj))
	return &DetectionJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DetectionJobClient) UpdateOneID(id int) *DetectionJobUpdateOne {
	mutation := newDetectionJobMutation(c.config, OpUpdateOne, withDetectionJobID(id))
	return &DetectionJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DetectionJob.
func (c *DetectionJobClient) Delete() *DetectionJobDelete {
	mutation := newDetectionJobMutation(c.config, OpDelete)
	return &DetectionJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DetectionJobClient) DeleteOne(dj *DetectionJob) *DetectionJobDeleteOne {
	return c.DeleteOneID(dj.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DetectionJobClient) DeleteOneID(id int) *DetectionJobDeleteOne {
	builder := c.Delete().Where(detectionjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DetectionJobDeleteOne{builder}
}

// Query returns a query builder for DetectionJob.
func (c *DetectionJobClient) Query() *DetectionJobQuery {
	return &DetectionJobQuery{config: c.config}
}

// Get returns a DetectionJob entity by its id.
func (c *DetectionJobClient) Get(ctx context.Context, id int) (*DetectionJob, error) {
	return c.Query().Where(detectionjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DetectionJobClient) GetX(ctx context.Context, id int) *DetectionJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstance queries the instance edge of a DetectionJob.
func (c *DetectionJobClient) QueryInstance(dj *DetectionJob) *DetectionJobInstanceQuery {
	query := &DetectionJobInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(detectionjob.Table, detectionjob.FieldID, id),
			sqlgraph.To(detectionjobinstance.Table, detectionjobinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, detectionjob.InstanceTable, detectionjob.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(dj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DetectionJobClient) Hooks() []Hook {
	return c.hooks.DetectionJob
}

// DetectionJobInstanceClient is a client for the DetectionJobInstance schema.
type DetectionJobInstanceClient struct {
	config
}

// NewDetectionJobInstanceClient returns a client for the DetectionJobInstance from the given config.
func NewDetectionJobInstanceClient(c config) *DetectionJobInstanceClient {
	return &DetectionJobInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `detectionjobinstance.Hooks(f(g(h())))`.
func (c *DetectionJobInstanceClient) Use(hooks ...Hook) {
	c.hooks.DetectionJobInstance = append(c.hooks.DetectionJobInstance, hooks...)
}

// Create returns a create builder for DetectionJobInstance.
func (c *DetectionJobInstanceClient) Create() *DetectionJobInstanceCreate {
	mutation := newDetectionJobInstanceMutation(c.config, OpCreate)
	return &DetectionJobInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DetectionJobInstance entities.
func (c *DetectionJobInstanceClient) CreateBulk(builders ...*DetectionJobInstanceCreate) *DetectionJobInstanceCreateBulk {
	return &DetectionJobInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DetectionJobInstance.
func (c *DetectionJobInstanceClient) Update() *DetectionJobInstanceUpdate {
	mutation := newDetectionJobInstanceMutation(c.config, OpUpdate)
	return &DetectionJobInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DetectionJobInstanceClient) UpdateOne(dji *DetectionJobInstance) *DetectionJobInstanceUpdateOne {
	mutation := newDetectionJobInstanceMutation(c.config, OpUpdateOne, withDetectionJobInstance(dji))
	return &DetectionJobInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DetectionJobInstanceClient) UpdateOneID(id int) *DetectionJobInstanceUpdateOne {
	mutation := newDetectionJobInstanceMutation(c.config, OpUpdateOne, withDetectionJobInstanceID(id))
	return &DetectionJobInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DetectionJobInstance.
func (c *DetectionJobInstanceClient) Delete() *DetectionJobInstanceDelete {
	mutation := newDetectionJobInstanceMutation(c.config, OpDelete)
	return &DetectionJobInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DetectionJobInstanceClient) DeleteOne(dji *DetectionJobInstance) *DetectionJobInstanceDeleteOne {
	return c.DeleteOneID(dji.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DetectionJobInstanceClient) DeleteOneID(id int) *DetectionJobInstanceDeleteOne {
	builder := c.Delete().Where(detectionjobinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DetectionJobInstanceDeleteOne{builder}
}

// Query returns a query builder for DetectionJobInstance.
func (c *DetectionJobInstanceClient) Query() *DetectionJobInstanceQuery {
	return &DetectionJobInstanceQuery{config: c.config}
}

// Get returns a DetectionJobInstance entity by its id.
func (c *DetectionJobInstanceClient) Get(ctx context.Context, id int) (*DetectionJobInstance, error) {
	return c.Query().Where(detectionjobinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DetectionJobInstanceClient) GetX(ctx context.Context, id int) *DetectionJobInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAnomalies queries the anomalies edge of a DetectionJobInstance.
func (c *DetectionJobInstanceClient) QueryAnomalies(dji *DetectionJobInstance) *AnomalyQuery {
	query := &AnomalyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dji.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(detectionjobinstance.Table, detectionjobinstance.FieldID, id),
			sqlgraph.To(anomaly.Table, anomaly.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, detectionjobinstance.AnomaliesTable, detectionjobinstance.AnomaliesColumn),
		)
		fromV = sqlgraph.Neighbors(dji.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDetectionJob queries the detection_job edge of a DetectionJobInstance.
func (c *DetectionJobInstanceClient) QueryDetectionJob(dji *DetectionJobInstance) *DetectionJobQuery {
	query := &DetectionJobQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dji.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(detectionjobinstance.Table, detectionjobinstance.FieldID, id),
			sqlgraph.To(detectionjob.Table, detectionjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, detectionjobinstance.DetectionJobTable, detectionjobinstance.DetectionJobColumn),
		)
		fromV = sqlgraph.Neighbors(dji.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DetectionJobInstanceClient) Hooks() []Hook {
	return c.hooks.DetectionJobInstance
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
