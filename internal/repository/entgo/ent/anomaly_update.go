// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/anomaly"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjobinstance"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
)

// AnomalyUpdate is the builder for updating Anomaly entities.
type AnomalyUpdate struct {
	config
	hooks    []Hook
	mutation *AnomalyMutation
}

// Where adds a new predicate for the AnomalyUpdate builder.
func (au *AnomalyUpdate) Where(ps ...predicate.Anomaly) *AnomalyUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetType sets the "type" field.
func (au *AnomalyUpdate) SetType(s string) *AnomalyUpdate {
	au.mutation.SetType(s)
	return au
}

// SetValue sets the "value" field.
func (au *AnomalyUpdate) SetValue(f float64) *AnomalyUpdate {
	au.mutation.ResetValue()
	au.mutation.SetValue(f)
	return au
}

// AddValue adds f to the "value" field.
func (au *AnomalyUpdate) AddValue(f float64) *AnomalyUpdate {
	au.mutation.AddValue(f)
	return au
}

// SetProcessed sets the "processed" field.
func (au *AnomalyUpdate) SetProcessed(b bool) *AnomalyUpdate {
	au.mutation.SetProcessed(b)
	return au
}

// SetNillableProcessed sets the "processed" field if the given value is not nil.
func (au *AnomalyUpdate) SetNillableProcessed(b *bool) *AnomalyUpdate {
	if b != nil {
		au.SetProcessed(*b)
	}
	return au
}

// SetPeriodStart sets the "period_start" field.
func (au *AnomalyUpdate) SetPeriodStart(t time.Time) *AnomalyUpdate {
	au.mutation.SetPeriodStart(t)
	return au
}

// SetPeriodEnd sets the "period_end" field.
func (au *AnomalyUpdate) SetPeriodEnd(t time.Time) *AnomalyUpdate {
	au.mutation.SetPeriodEnd(t)
	return au
}

// SetDetectionJobInstanceID sets the "detection_job_instance" edge to the DetectionJobInstance entity by ID.
func (au *AnomalyUpdate) SetDetectionJobInstanceID(id int) *AnomalyUpdate {
	au.mutation.SetDetectionJobInstanceID(id)
	return au
}

// SetDetectionJobInstance sets the "detection_job_instance" edge to the DetectionJobInstance entity.
func (au *AnomalyUpdate) SetDetectionJobInstance(d *DetectionJobInstance) *AnomalyUpdate {
	return au.SetDetectionJobInstanceID(d.ID)
}

// Mutation returns the AnomalyMutation object of the builder.
func (au *AnomalyUpdate) Mutation() *AnomalyMutation {
	return au.mutation
}

// ClearDetectionJobInstance clears the "detection_job_instance" edge to the DetectionJobInstance entity.
func (au *AnomalyUpdate) ClearDetectionJobInstance() *AnomalyUpdate {
	au.mutation.ClearDetectionJobInstance()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnomalyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnomalyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnomalyUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnomalyUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnomalyUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AnomalyUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := anomaly.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AnomalyUpdate) check() error {
	if v, ok := au.mutation.GetType(); ok {
		if err := anomaly.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := au.mutation.DetectionJobInstanceID(); au.mutation.DetectionJobInstanceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"detection_job_instance\"")
	}
	return nil
}

func (au *AnomalyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   anomaly.Table,
			Columns: anomaly.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: anomaly.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: anomaly.FieldUpdateTime,
		})
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: anomaly.FieldType,
		})
	}
	if value, ok := au.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: anomaly.FieldValue,
		})
	}
	if value, ok := au.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: anomaly.FieldValue,
		})
	}
	if value, ok := au.mutation.Processed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: anomaly.FieldProcessed,
		})
	}
	if value, ok := au.mutation.PeriodStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: anomaly.FieldPeriodStart,
		})
	}
	if value, ok := au.mutation.PeriodEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: anomaly.FieldPeriodEnd,
		})
	}
	if au.mutation.DetectionJobInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   anomaly.DetectionJobInstanceTable,
			Columns: []string{anomaly.DetectionJobInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DetectionJobInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   anomaly.DetectionJobInstanceTable,
			Columns: []string{anomaly.DetectionJobInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{anomaly.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AnomalyUpdateOne is the builder for updating a single Anomaly entity.
type AnomalyUpdateOne struct {
	config
	hooks    []Hook
	mutation *AnomalyMutation
}

// SetType sets the "type" field.
func (auo *AnomalyUpdateOne) SetType(s string) *AnomalyUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetValue sets the "value" field.
func (auo *AnomalyUpdateOne) SetValue(f float64) *AnomalyUpdateOne {
	auo.mutation.ResetValue()
	auo.mutation.SetValue(f)
	return auo
}

// AddValue adds f to the "value" field.
func (auo *AnomalyUpdateOne) AddValue(f float64) *AnomalyUpdateOne {
	auo.mutation.AddValue(f)
	return auo
}

// SetProcessed sets the "processed" field.
func (auo *AnomalyUpdateOne) SetProcessed(b bool) *AnomalyUpdateOne {
	auo.mutation.SetProcessed(b)
	return auo
}

// SetNillableProcessed sets the "processed" field if the given value is not nil.
func (auo *AnomalyUpdateOne) SetNillableProcessed(b *bool) *AnomalyUpdateOne {
	if b != nil {
		auo.SetProcessed(*b)
	}
	return auo
}

// SetPeriodStart sets the "period_start" field.
func (auo *AnomalyUpdateOne) SetPeriodStart(t time.Time) *AnomalyUpdateOne {
	auo.mutation.SetPeriodStart(t)
	return auo
}

// SetPeriodEnd sets the "period_end" field.
func (auo *AnomalyUpdateOne) SetPeriodEnd(t time.Time) *AnomalyUpdateOne {
	auo.mutation.SetPeriodEnd(t)
	return auo
}

// SetDetectionJobInstanceID sets the "detection_job_instance" edge to the DetectionJobInstance entity by ID.
func (auo *AnomalyUpdateOne) SetDetectionJobInstanceID(id int) *AnomalyUpdateOne {
	auo.mutation.SetDetectionJobInstanceID(id)
	return auo
}

// SetDetectionJobInstance sets the "detection_job_instance" edge to the DetectionJobInstance entity.
func (auo *AnomalyUpdateOne) SetDetectionJobInstance(d *DetectionJobInstance) *AnomalyUpdateOne {
	return auo.SetDetectionJobInstanceID(d.ID)
}

// Mutation returns the AnomalyMutation object of the builder.
func (auo *AnomalyUpdateOne) Mutation() *AnomalyMutation {
	return auo.mutation
}

// ClearDetectionJobInstance clears the "detection_job_instance" edge to the DetectionJobInstance entity.
func (auo *AnomalyUpdateOne) ClearDetectionJobInstance() *AnomalyUpdateOne {
	auo.mutation.ClearDetectionJobInstance()
	return auo
}

// Save executes the query and returns the updated Anomaly entity.
func (auo *AnomalyUpdateOne) Save(ctx context.Context) (*Anomaly, error) {
	var (
		err  error
		node *Anomaly
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnomalyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnomalyUpdateOne) SaveX(ctx context.Context) *Anomaly {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnomalyUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnomalyUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AnomalyUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := anomaly.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AnomalyUpdateOne) check() error {
	if v, ok := auo.mutation.GetType(); ok {
		if err := anomaly.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := auo.mutation.DetectionJobInstanceID(); auo.mutation.DetectionJobInstanceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"detection_job_instance\"")
	}
	return nil
}

func (auo *AnomalyUpdateOne) sqlSave(ctx context.Context) (_node *Anomaly, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   anomaly.Table,
			Columns: anomaly.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: anomaly.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Anomaly.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: anomaly.FieldUpdateTime,
		})
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: anomaly.FieldType,
		})
	}
	if value, ok := auo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: anomaly.FieldValue,
		})
	}
	if value, ok := auo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: anomaly.FieldValue,
		})
	}
	if value, ok := auo.mutation.Processed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: anomaly.FieldProcessed,
		})
	}
	if value, ok := auo.mutation.PeriodStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: anomaly.FieldPeriodStart,
		})
	}
	if value, ok := auo.mutation.PeriodEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: anomaly.FieldPeriodEnd,
		})
	}
	if auo.mutation.DetectionJobInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   anomaly.DetectionJobInstanceTable,
			Columns: []string{anomaly.DetectionJobInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DetectionJobInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   anomaly.DetectionJobInstanceTable,
			Columns: []string{anomaly.DetectionJobInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Anomaly{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{anomaly.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
