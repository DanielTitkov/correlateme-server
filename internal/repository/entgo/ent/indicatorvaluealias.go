// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicator"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicatorvaluealias"
)

// IndicatorValueAlias is the model entity for the IndicatorValueAlias schema.
type IndicatorValueAlias struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ValueMapping holds the value of the "value_mapping" field.
	ValueMapping map[float64]string `json:"value_mapping,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IndicatorValueAliasQuery when eager-loading is set.
	Edges                           IndicatorValueAliasEdges `json:"edges"`
	indicator_indicator_value_alias *int
}

// IndicatorValueAliasEdges holds the relations/edges for other nodes in the graph.
type IndicatorValueAliasEdges struct {
	// Indicator holds the value of the indicator edge.
	Indicator *Indicator `json:"indicator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IndicatorOrErr returns the Indicator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IndicatorValueAliasEdges) IndicatorOrErr() (*Indicator, error) {
	if e.loadedTypes[0] {
		if e.Indicator == nil {
			// The edge indicator was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: indicator.Label}
		}
		return e.Indicator, nil
	}
	return nil, &NotLoadedError{edge: "indicator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IndicatorValueAlias) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case indicatorvaluealias.FieldValueMapping:
			values[i] = &[]byte{}
		case indicatorvaluealias.FieldID:
			values[i] = &sql.NullInt64{}
		case indicatorvaluealias.ForeignKeys[0]: // indicator_indicator_value_alias
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type IndicatorValueAlias", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IndicatorValueAlias fields.
func (iva *IndicatorValueAlias) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case indicatorvaluealias.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			iva.ID = int(value.Int64)
		case indicatorvaluealias.FieldValueMapping:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field value_mapping", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &iva.ValueMapping); err != nil {
					return fmt.Errorf("unmarshal field value_mapping: %v", err)
				}
			}
		case indicatorvaluealias.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field indicator_indicator_value_alias", value)
			} else if value.Valid {
				iva.indicator_indicator_value_alias = new(int)
				*iva.indicator_indicator_value_alias = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryIndicator queries the "indicator" edge of the IndicatorValueAlias entity.
func (iva *IndicatorValueAlias) QueryIndicator() *IndicatorQuery {
	return (&IndicatorValueAliasClient{config: iva.config}).QueryIndicator(iva)
}

// Update returns a builder for updating this IndicatorValueAlias.
// Note that you need to call IndicatorValueAlias.Unwrap() before calling this method if this IndicatorValueAlias
// was returned from a transaction, and the transaction was committed or rolled back.
func (iva *IndicatorValueAlias) Update() *IndicatorValueAliasUpdateOne {
	return (&IndicatorValueAliasClient{config: iva.config}).UpdateOne(iva)
}

// Unwrap unwraps the IndicatorValueAlias entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iva *IndicatorValueAlias) Unwrap() *IndicatorValueAlias {
	tx, ok := iva.config.driver.(*txDriver)
	if !ok {
		panic("ent: IndicatorValueAlias is not a transactional entity")
	}
	iva.config.driver = tx.drv
	return iva
}

// String implements the fmt.Stringer.
func (iva *IndicatorValueAlias) String() string {
	var builder strings.Builder
	builder.WriteString("IndicatorValueAlias(")
	builder.WriteString(fmt.Sprintf("id=%v", iva.ID))
	builder.WriteString(", value_mapping=")
	builder.WriteString(fmt.Sprintf("%v", iva.ValueMapping))
	builder.WriteByte(')')
	return builder.String()
}

// IndicatorValueAliasSlice is a parsable slice of IndicatorValueAlias.
type IndicatorValueAliasSlice []*IndicatorValueAlias

func (iva IndicatorValueAliasSlice) config(cfg config) {
	for _i := range iva {
		iva[_i].config = cfg
	}
}
