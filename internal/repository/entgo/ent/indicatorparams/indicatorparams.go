// Code generated by entc, DO NOT EDIT.

package indicatorparams

const (
	// Label holds the string label denoting the indicatorparams type in the database.
	Label = "indicator_params"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValueMapping holds the string denoting the value_mapping field in the database.
	FieldValueMapping = "value_mapping"
	// FieldValueParams holds the string denoting the value_params field in the database.
	FieldValueParams = "value_params"

	// EdgeIndicator holds the string denoting the indicator edge name in mutations.
	EdgeIndicator = "indicator"

	// Table holds the table name of the indicatorparams in the database.
	Table = "indicator_params"
	// IndicatorTable is the table the holds the indicator relation/edge.
	IndicatorTable = "indicator_params"
	// IndicatorInverseTable is the table name for the Indicator entity.
	// It exists in this package in order to avoid circular dependency with the "indicator" package.
	IndicatorInverseTable = "indicators"
	// IndicatorColumn is the table column denoting the indicator relation/edge.
	IndicatorColumn = "indicator_indicator_params"
)

// Columns holds all SQL columns for indicatorparams fields.
var Columns = []string{
	FieldID,
	FieldValueMapping,
	FieldValueParams,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the IndicatorParams type.
var ForeignKeys = []string{
	"indicator_indicator_params",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
