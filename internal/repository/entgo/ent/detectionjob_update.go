// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjob"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjobinstance"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
)

// DetectionJobUpdate is the builder for updating DetectionJob entities.
type DetectionJobUpdate struct {
	config
	hooks    []Hook
	mutation *DetectionJobMutation
}

// Where adds a new predicate for the DetectionJobUpdate builder.
func (dju *DetectionJobUpdate) Where(ps ...predicate.DetectionJob) *DetectionJobUpdate {
	dju.mutation.predicates = append(dju.mutation.predicates, ps...)
	return dju
}

// SetSchedule sets the "schedule" field.
func (dju *DetectionJobUpdate) SetSchedule(s string) *DetectionJobUpdate {
	dju.mutation.SetSchedule(s)
	return dju
}

// SetNillableSchedule sets the "schedule" field if the given value is not nil.
func (dju *DetectionJobUpdate) SetNillableSchedule(s *string) *DetectionJobUpdate {
	if s != nil {
		dju.SetSchedule(*s)
	}
	return dju
}

// ClearSchedule clears the value of the "schedule" field.
func (dju *DetectionJobUpdate) ClearSchedule() *DetectionJobUpdate {
	dju.mutation.ClearSchedule()
	return dju
}

// SetMethod sets the "method" field.
func (dju *DetectionJobUpdate) SetMethod(s string) *DetectionJobUpdate {
	dju.mutation.SetMethod(s)
	return dju
}

// SetSiteID sets the "site_id" field.
func (dju *DetectionJobUpdate) SetSiteID(s string) *DetectionJobUpdate {
	dju.mutation.SetSiteID(s)
	return dju
}

// SetMetric sets the "metric" field.
func (dju *DetectionJobUpdate) SetMetric(s string) *DetectionJobUpdate {
	dju.mutation.SetMetric(s)
	return dju
}

// SetAttribute sets the "attribute" field.
func (dju *DetectionJobUpdate) SetAttribute(s string) *DetectionJobUpdate {
	dju.mutation.SetAttribute(s)
	return dju
}

// SetTimeAgo sets the "time_ago" field.
func (dju *DetectionJobUpdate) SetTimeAgo(s string) *DetectionJobUpdate {
	dju.mutation.SetTimeAgo(s)
	return dju
}

// SetTimeStep sets the "time_step" field.
func (dju *DetectionJobUpdate) SetTimeStep(s string) *DetectionJobUpdate {
	dju.mutation.SetTimeStep(s)
	return dju
}

// SetDescription sets the "description" field.
func (dju *DetectionJobUpdate) SetDescription(s string) *DetectionJobUpdate {
	dju.mutation.SetDescription(s)
	return dju
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dju *DetectionJobUpdate) SetNillableDescription(s *string) *DetectionJobUpdate {
	if s != nil {
		dju.SetDescription(*s)
	}
	return dju
}

// ClearDescription clears the value of the "description" field.
func (dju *DetectionJobUpdate) ClearDescription() *DetectionJobUpdate {
	dju.mutation.ClearDescription()
	return dju
}

// AddInstanceIDs adds the "instance" edge to the DetectionJobInstance entity by IDs.
func (dju *DetectionJobUpdate) AddInstanceIDs(ids ...int) *DetectionJobUpdate {
	dju.mutation.AddInstanceIDs(ids...)
	return dju
}

// AddInstance adds the "instance" edges to the DetectionJobInstance entity.
func (dju *DetectionJobUpdate) AddInstance(d ...*DetectionJobInstance) *DetectionJobUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dju.AddInstanceIDs(ids...)
}

// Mutation returns the DetectionJobMutation object of the builder.
func (dju *DetectionJobUpdate) Mutation() *DetectionJobMutation {
	return dju.mutation
}

// ClearInstance clears all "instance" edges to the DetectionJobInstance entity.
func (dju *DetectionJobUpdate) ClearInstance() *DetectionJobUpdate {
	dju.mutation.ClearInstance()
	return dju
}

// RemoveInstanceIDs removes the "instance" edge to DetectionJobInstance entities by IDs.
func (dju *DetectionJobUpdate) RemoveInstanceIDs(ids ...int) *DetectionJobUpdate {
	dju.mutation.RemoveInstanceIDs(ids...)
	return dju
}

// RemoveInstance removes "instance" edges to DetectionJobInstance entities.
func (dju *DetectionJobUpdate) RemoveInstance(d ...*DetectionJobInstance) *DetectionJobUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dju.RemoveInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dju *DetectionJobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	dju.defaults()
	if len(dju.hooks) == 0 {
		if err = dju.check(); err != nil {
			return 0, err
		}
		affected, err = dju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DetectionJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dju.check(); err != nil {
				return 0, err
			}
			dju.mutation = mutation
			affected, err = dju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dju.hooks) - 1; i >= 0; i-- {
			mut = dju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dju *DetectionJobUpdate) SaveX(ctx context.Context) int {
	affected, err := dju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dju *DetectionJobUpdate) Exec(ctx context.Context) error {
	_, err := dju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dju *DetectionJobUpdate) ExecX(ctx context.Context) {
	if err := dju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dju *DetectionJobUpdate) defaults() {
	if _, ok := dju.mutation.UpdateTime(); !ok {
		v := detectionjob.UpdateDefaultUpdateTime()
		dju.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dju *DetectionJobUpdate) check() error {
	if v, ok := dju.mutation.Method(); ok {
		if err := detectionjob.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf("ent: validator failed for field \"method\": %w", err)}
		}
	}
	if v, ok := dju.mutation.SiteID(); ok {
		if err := detectionjob.SiteIDValidator(v); err != nil {
			return &ValidationError{Name: "site_id", err: fmt.Errorf("ent: validator failed for field \"site_id\": %w", err)}
		}
	}
	if v, ok := dju.mutation.Metric(); ok {
		if err := detectionjob.MetricValidator(v); err != nil {
			return &ValidationError{Name: "metric", err: fmt.Errorf("ent: validator failed for field \"metric\": %w", err)}
		}
	}
	if v, ok := dju.mutation.Attribute(); ok {
		if err := detectionjob.AttributeValidator(v); err != nil {
			return &ValidationError{Name: "attribute", err: fmt.Errorf("ent: validator failed for field \"attribute\": %w", err)}
		}
	}
	if v, ok := dju.mutation.TimeAgo(); ok {
		if err := detectionjob.TimeAgoValidator(v); err != nil {
			return &ValidationError{Name: "time_ago", err: fmt.Errorf("ent: validator failed for field \"time_ago\": %w", err)}
		}
	}
	if v, ok := dju.mutation.TimeStep(); ok {
		if err := detectionjob.TimeStepValidator(v); err != nil {
			return &ValidationError{Name: "time_step", err: fmt.Errorf("ent: validator failed for field \"time_step\": %w", err)}
		}
	}
	return nil
}

func (dju *DetectionJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   detectionjob.Table,
			Columns: detectionjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: detectionjob.FieldID,
			},
		},
	}
	if ps := dju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dju.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjob.FieldUpdateTime,
		})
	}
	if value, ok := dju.mutation.Schedule(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldSchedule,
		})
	}
	if dju.mutation.ScheduleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: detectionjob.FieldSchedule,
		})
	}
	if value, ok := dju.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldMethod,
		})
	}
	if value, ok := dju.mutation.SiteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldSiteID,
		})
	}
	if value, ok := dju.mutation.Metric(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldMetric,
		})
	}
	if value, ok := dju.mutation.Attribute(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldAttribute,
		})
	}
	if value, ok := dju.mutation.TimeAgo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldTimeAgo,
		})
	}
	if value, ok := dju.mutation.TimeStep(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldTimeStep,
		})
	}
	if value, ok := dju.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldDescription,
		})
	}
	if dju.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: detectionjob.FieldDescription,
		})
	}
	if dju.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjob.InstanceTable,
			Columns: []string{detectionjob.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dju.mutation.RemovedInstanceIDs(); len(nodes) > 0 && !dju.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjob.InstanceTable,
			Columns: []string{detectionjob.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dju.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjob.InstanceTable,
			Columns: []string{detectionjob.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{detectionjob.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DetectionJobUpdateOne is the builder for updating a single DetectionJob entity.
type DetectionJobUpdateOne struct {
	config
	hooks    []Hook
	mutation *DetectionJobMutation
}

// SetSchedule sets the "schedule" field.
func (djuo *DetectionJobUpdateOne) SetSchedule(s string) *DetectionJobUpdateOne {
	djuo.mutation.SetSchedule(s)
	return djuo
}

// SetNillableSchedule sets the "schedule" field if the given value is not nil.
func (djuo *DetectionJobUpdateOne) SetNillableSchedule(s *string) *DetectionJobUpdateOne {
	if s != nil {
		djuo.SetSchedule(*s)
	}
	return djuo
}

// ClearSchedule clears the value of the "schedule" field.
func (djuo *DetectionJobUpdateOne) ClearSchedule() *DetectionJobUpdateOne {
	djuo.mutation.ClearSchedule()
	return djuo
}

// SetMethod sets the "method" field.
func (djuo *DetectionJobUpdateOne) SetMethod(s string) *DetectionJobUpdateOne {
	djuo.mutation.SetMethod(s)
	return djuo
}

// SetSiteID sets the "site_id" field.
func (djuo *DetectionJobUpdateOne) SetSiteID(s string) *DetectionJobUpdateOne {
	djuo.mutation.SetSiteID(s)
	return djuo
}

// SetMetric sets the "metric" field.
func (djuo *DetectionJobUpdateOne) SetMetric(s string) *DetectionJobUpdateOne {
	djuo.mutation.SetMetric(s)
	return djuo
}

// SetAttribute sets the "attribute" field.
func (djuo *DetectionJobUpdateOne) SetAttribute(s string) *DetectionJobUpdateOne {
	djuo.mutation.SetAttribute(s)
	return djuo
}

// SetTimeAgo sets the "time_ago" field.
func (djuo *DetectionJobUpdateOne) SetTimeAgo(s string) *DetectionJobUpdateOne {
	djuo.mutation.SetTimeAgo(s)
	return djuo
}

// SetTimeStep sets the "time_step" field.
func (djuo *DetectionJobUpdateOne) SetTimeStep(s string) *DetectionJobUpdateOne {
	djuo.mutation.SetTimeStep(s)
	return djuo
}

// SetDescription sets the "description" field.
func (djuo *DetectionJobUpdateOne) SetDescription(s string) *DetectionJobUpdateOne {
	djuo.mutation.SetDescription(s)
	return djuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (djuo *DetectionJobUpdateOne) SetNillableDescription(s *string) *DetectionJobUpdateOne {
	if s != nil {
		djuo.SetDescription(*s)
	}
	return djuo
}

// ClearDescription clears the value of the "description" field.
func (djuo *DetectionJobUpdateOne) ClearDescription() *DetectionJobUpdateOne {
	djuo.mutation.ClearDescription()
	return djuo
}

// AddInstanceIDs adds the "instance" edge to the DetectionJobInstance entity by IDs.
func (djuo *DetectionJobUpdateOne) AddInstanceIDs(ids ...int) *DetectionJobUpdateOne {
	djuo.mutation.AddInstanceIDs(ids...)
	return djuo
}

// AddInstance adds the "instance" edges to the DetectionJobInstance entity.
func (djuo *DetectionJobUpdateOne) AddInstance(d ...*DetectionJobInstance) *DetectionJobUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return djuo.AddInstanceIDs(ids...)
}

// Mutation returns the DetectionJobMutation object of the builder.
func (djuo *DetectionJobUpdateOne) Mutation() *DetectionJobMutation {
	return djuo.mutation
}

// ClearInstance clears all "instance" edges to the DetectionJobInstance entity.
func (djuo *DetectionJobUpdateOne) ClearInstance() *DetectionJobUpdateOne {
	djuo.mutation.ClearInstance()
	return djuo
}

// RemoveInstanceIDs removes the "instance" edge to DetectionJobInstance entities by IDs.
func (djuo *DetectionJobUpdateOne) RemoveInstanceIDs(ids ...int) *DetectionJobUpdateOne {
	djuo.mutation.RemoveInstanceIDs(ids...)
	return djuo
}

// RemoveInstance removes "instance" edges to DetectionJobInstance entities.
func (djuo *DetectionJobUpdateOne) RemoveInstance(d ...*DetectionJobInstance) *DetectionJobUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return djuo.RemoveInstanceIDs(ids...)
}

// Save executes the query and returns the updated DetectionJob entity.
func (djuo *DetectionJobUpdateOne) Save(ctx context.Context) (*DetectionJob, error) {
	var (
		err  error
		node *DetectionJob
	)
	djuo.defaults()
	if len(djuo.hooks) == 0 {
		if err = djuo.check(); err != nil {
			return nil, err
		}
		node, err = djuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DetectionJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = djuo.check(); err != nil {
				return nil, err
			}
			djuo.mutation = mutation
			node, err = djuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(djuo.hooks) - 1; i >= 0; i-- {
			mut = djuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, djuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (djuo *DetectionJobUpdateOne) SaveX(ctx context.Context) *DetectionJob {
	node, err := djuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (djuo *DetectionJobUpdateOne) Exec(ctx context.Context) error {
	_, err := djuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (djuo *DetectionJobUpdateOne) ExecX(ctx context.Context) {
	if err := djuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (djuo *DetectionJobUpdateOne) defaults() {
	if _, ok := djuo.mutation.UpdateTime(); !ok {
		v := detectionjob.UpdateDefaultUpdateTime()
		djuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (djuo *DetectionJobUpdateOne) check() error {
	if v, ok := djuo.mutation.Method(); ok {
		if err := detectionjob.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf("ent: validator failed for field \"method\": %w", err)}
		}
	}
	if v, ok := djuo.mutation.SiteID(); ok {
		if err := detectionjob.SiteIDValidator(v); err != nil {
			return &ValidationError{Name: "site_id", err: fmt.Errorf("ent: validator failed for field \"site_id\": %w", err)}
		}
	}
	if v, ok := djuo.mutation.Metric(); ok {
		if err := detectionjob.MetricValidator(v); err != nil {
			return &ValidationError{Name: "metric", err: fmt.Errorf("ent: validator failed for field \"metric\": %w", err)}
		}
	}
	if v, ok := djuo.mutation.Attribute(); ok {
		if err := detectionjob.AttributeValidator(v); err != nil {
			return &ValidationError{Name: "attribute", err: fmt.Errorf("ent: validator failed for field \"attribute\": %w", err)}
		}
	}
	if v, ok := djuo.mutation.TimeAgo(); ok {
		if err := detectionjob.TimeAgoValidator(v); err != nil {
			return &ValidationError{Name: "time_ago", err: fmt.Errorf("ent: validator failed for field \"time_ago\": %w", err)}
		}
	}
	if v, ok := djuo.mutation.TimeStep(); ok {
		if err := detectionjob.TimeStepValidator(v); err != nil {
			return &ValidationError{Name: "time_step", err: fmt.Errorf("ent: validator failed for field \"time_step\": %w", err)}
		}
	}
	return nil
}

func (djuo *DetectionJobUpdateOne) sqlSave(ctx context.Context) (_node *DetectionJob, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   detectionjob.Table,
			Columns: detectionjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: detectionjob.FieldID,
			},
		},
	}
	id, ok := djuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DetectionJob.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := djuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := djuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjob.FieldUpdateTime,
		})
	}
	if value, ok := djuo.mutation.Schedule(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldSchedule,
		})
	}
	if djuo.mutation.ScheduleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: detectionjob.FieldSchedule,
		})
	}
	if value, ok := djuo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldMethod,
		})
	}
	if value, ok := djuo.mutation.SiteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldSiteID,
		})
	}
	if value, ok := djuo.mutation.Metric(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldMetric,
		})
	}
	if value, ok := djuo.mutation.Attribute(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldAttribute,
		})
	}
	if value, ok := djuo.mutation.TimeAgo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldTimeAgo,
		})
	}
	if value, ok := djuo.mutation.TimeStep(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldTimeStep,
		})
	}
	if value, ok := djuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detectionjob.FieldDescription,
		})
	}
	if djuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: detectionjob.FieldDescription,
		})
	}
	if djuo.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjob.InstanceTable,
			Columns: []string{detectionjob.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := djuo.mutation.RemovedInstanceIDs(); len(nodes) > 0 && !djuo.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjob.InstanceTable,
			Columns: []string{detectionjob.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := djuo.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjob.InstanceTable,
			Columns: []string{detectionjob.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DetectionJob{config: djuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, djuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{detectionjob.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
