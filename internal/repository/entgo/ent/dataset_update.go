// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/correlation"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dataset"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicator"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/observation"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/user"
)

// DatasetUpdate is the builder for updating Dataset entities.
type DatasetUpdate struct {
	config
	hooks    []Hook
	mutation *DatasetMutation
}

// Where adds a new predicate for the DatasetUpdate builder.
func (du *DatasetUpdate) Where(ps ...predicate.Dataset) *DatasetUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetShared sets the "shared" field.
func (du *DatasetUpdate) SetShared(b bool) *DatasetUpdate {
	du.mutation.SetShared(b)
	return du
}

// SetNillableShared sets the "shared" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableShared(b *bool) *DatasetUpdate {
	if b != nil {
		du.SetShared(*b)
	}
	return du
}

// SetSource sets the "source" field.
func (du *DatasetUpdate) SetSource(s string) *DatasetUpdate {
	du.mutation.SetSource(s)
	return du
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableSource(s *string) *DatasetUpdate {
	if s != nil {
		du.SetSource(*s)
	}
	return du
}

// ClearSource clears the value of the "source" field.
func (du *DatasetUpdate) ClearSource() *DatasetUpdate {
	du.mutation.ClearSource()
	return du
}

// AddLeftIDs adds the "left" edge to the Correlation entity by IDs.
func (du *DatasetUpdate) AddLeftIDs(ids ...int) *DatasetUpdate {
	du.mutation.AddLeftIDs(ids...)
	return du
}

// AddLeft adds the "left" edges to the Correlation entity.
func (du *DatasetUpdate) AddLeft(c ...*Correlation) *DatasetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.AddLeftIDs(ids...)
}

// AddRightIDs adds the "right" edge to the Correlation entity by IDs.
func (du *DatasetUpdate) AddRightIDs(ids ...int) *DatasetUpdate {
	du.mutation.AddRightIDs(ids...)
	return du
}

// AddRight adds the "right" edges to the Correlation entity.
func (du *DatasetUpdate) AddRight(c ...*Correlation) *DatasetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.AddRightIDs(ids...)
}

// AddObservationIDs adds the "observations" edge to the Observation entity by IDs.
func (du *DatasetUpdate) AddObservationIDs(ids ...int) *DatasetUpdate {
	du.mutation.AddObservationIDs(ids...)
	return du
}

// AddObservations adds the "observations" edges to the Observation entity.
func (du *DatasetUpdate) AddObservations(o ...*Observation) *DatasetUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return du.AddObservationIDs(ids...)
}

// SetIndicatorID sets the "indicator" edge to the Indicator entity by ID.
func (du *DatasetUpdate) SetIndicatorID(id int) *DatasetUpdate {
	du.mutation.SetIndicatorID(id)
	return du
}

// SetIndicator sets the "indicator" edge to the Indicator entity.
func (du *DatasetUpdate) SetIndicator(i *Indicator) *DatasetUpdate {
	return du.SetIndicatorID(i.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (du *DatasetUpdate) SetUserID(id int) *DatasetUpdate {
	du.mutation.SetUserID(id)
	return du
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (du *DatasetUpdate) SetNillableUserID(id *int) *DatasetUpdate {
	if id != nil {
		du = du.SetUserID(*id)
	}
	return du
}

// SetUser sets the "user" edge to the User entity.
func (du *DatasetUpdate) SetUser(u *User) *DatasetUpdate {
	return du.SetUserID(u.ID)
}

// Mutation returns the DatasetMutation object of the builder.
func (du *DatasetUpdate) Mutation() *DatasetMutation {
	return du.mutation
}

// ClearLeft clears all "left" edges to the Correlation entity.
func (du *DatasetUpdate) ClearLeft() *DatasetUpdate {
	du.mutation.ClearLeft()
	return du
}

// RemoveLeftIDs removes the "left" edge to Correlation entities by IDs.
func (du *DatasetUpdate) RemoveLeftIDs(ids ...int) *DatasetUpdate {
	du.mutation.RemoveLeftIDs(ids...)
	return du
}

// RemoveLeft removes "left" edges to Correlation entities.
func (du *DatasetUpdate) RemoveLeft(c ...*Correlation) *DatasetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.RemoveLeftIDs(ids...)
}

// ClearRight clears all "right" edges to the Correlation entity.
func (du *DatasetUpdate) ClearRight() *DatasetUpdate {
	du.mutation.ClearRight()
	return du
}

// RemoveRightIDs removes the "right" edge to Correlation entities by IDs.
func (du *DatasetUpdate) RemoveRightIDs(ids ...int) *DatasetUpdate {
	du.mutation.RemoveRightIDs(ids...)
	return du
}

// RemoveRight removes "right" edges to Correlation entities.
func (du *DatasetUpdate) RemoveRight(c ...*Correlation) *DatasetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.RemoveRightIDs(ids...)
}

// ClearObservations clears all "observations" edges to the Observation entity.
func (du *DatasetUpdate) ClearObservations() *DatasetUpdate {
	du.mutation.ClearObservations()
	return du
}

// RemoveObservationIDs removes the "observations" edge to Observation entities by IDs.
func (du *DatasetUpdate) RemoveObservationIDs(ids ...int) *DatasetUpdate {
	du.mutation.RemoveObservationIDs(ids...)
	return du
}

// RemoveObservations removes "observations" edges to Observation entities.
func (du *DatasetUpdate) RemoveObservations(o ...*Observation) *DatasetUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return du.RemoveObservationIDs(ids...)
}

// ClearIndicator clears the "indicator" edge to the Indicator entity.
func (du *DatasetUpdate) ClearIndicator() *DatasetUpdate {
	du.mutation.ClearIndicator()
	return du
}

// ClearUser clears the "user" edge to the User entity.
func (du *DatasetUpdate) ClearUser() *DatasetUpdate {
	du.mutation.ClearUser()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DatasetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	du.defaults()
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatasetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DatasetUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DatasetUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DatasetUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DatasetUpdate) defaults() {
	if _, ok := du.mutation.UpdateTime(); !ok {
		v := dataset.UpdateDefaultUpdateTime()
		du.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DatasetUpdate) check() error {
	if _, ok := du.mutation.IndicatorID(); du.mutation.IndicatorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"indicator\"")
	}
	return nil
}

func (du *DatasetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dataset.Table,
			Columns: dataset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dataset.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dataset.FieldUpdateTime,
		})
	}
	if value, ok := du.mutation.Shared(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dataset.FieldShared,
		})
	}
	if value, ok := du.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataset.FieldSource,
		})
	}
	if du.mutation.SourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dataset.FieldSource,
		})
	}
	if du.mutation.LeftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.LeftTable,
			Columns: []string{dataset.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedLeftIDs(); len(nodes) > 0 && !du.mutation.LeftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.LeftTable,
			Columns: []string{dataset.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.LeftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.LeftTable,
			Columns: []string{dataset.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.RightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.RightTable,
			Columns: []string{dataset.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedRightIDs(); len(nodes) > 0 && !du.mutation.RightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.RightTable,
			Columns: []string{dataset.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.RightTable,
			Columns: []string{dataset.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ObservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ObservationsTable,
			Columns: []string{dataset.ObservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: observation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedObservationsIDs(); len(nodes) > 0 && !du.mutation.ObservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ObservationsTable,
			Columns: []string{dataset.ObservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: observation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ObservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ObservationsTable,
			Columns: []string{dataset.ObservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: observation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.IndicatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.IndicatorTable,
			Columns: []string{dataset.IndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: indicator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.IndicatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.IndicatorTable,
			Columns: []string{dataset.IndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: indicator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.UserTable,
			Columns: []string{dataset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.UserTable,
			Columns: []string{dataset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dataset.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DatasetUpdateOne is the builder for updating a single Dataset entity.
type DatasetUpdateOne struct {
	config
	hooks    []Hook
	mutation *DatasetMutation
}

// SetShared sets the "shared" field.
func (duo *DatasetUpdateOne) SetShared(b bool) *DatasetUpdateOne {
	duo.mutation.SetShared(b)
	return duo
}

// SetNillableShared sets the "shared" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableShared(b *bool) *DatasetUpdateOne {
	if b != nil {
		duo.SetShared(*b)
	}
	return duo
}

// SetSource sets the "source" field.
func (duo *DatasetUpdateOne) SetSource(s string) *DatasetUpdateOne {
	duo.mutation.SetSource(s)
	return duo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableSource(s *string) *DatasetUpdateOne {
	if s != nil {
		duo.SetSource(*s)
	}
	return duo
}

// ClearSource clears the value of the "source" field.
func (duo *DatasetUpdateOne) ClearSource() *DatasetUpdateOne {
	duo.mutation.ClearSource()
	return duo
}

// AddLeftIDs adds the "left" edge to the Correlation entity by IDs.
func (duo *DatasetUpdateOne) AddLeftIDs(ids ...int) *DatasetUpdateOne {
	duo.mutation.AddLeftIDs(ids...)
	return duo
}

// AddLeft adds the "left" edges to the Correlation entity.
func (duo *DatasetUpdateOne) AddLeft(c ...*Correlation) *DatasetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.AddLeftIDs(ids...)
}

// AddRightIDs adds the "right" edge to the Correlation entity by IDs.
func (duo *DatasetUpdateOne) AddRightIDs(ids ...int) *DatasetUpdateOne {
	duo.mutation.AddRightIDs(ids...)
	return duo
}

// AddRight adds the "right" edges to the Correlation entity.
func (duo *DatasetUpdateOne) AddRight(c ...*Correlation) *DatasetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.AddRightIDs(ids...)
}

// AddObservationIDs adds the "observations" edge to the Observation entity by IDs.
func (duo *DatasetUpdateOne) AddObservationIDs(ids ...int) *DatasetUpdateOne {
	duo.mutation.AddObservationIDs(ids...)
	return duo
}

// AddObservations adds the "observations" edges to the Observation entity.
func (duo *DatasetUpdateOne) AddObservations(o ...*Observation) *DatasetUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return duo.AddObservationIDs(ids...)
}

// SetIndicatorID sets the "indicator" edge to the Indicator entity by ID.
func (duo *DatasetUpdateOne) SetIndicatorID(id int) *DatasetUpdateOne {
	duo.mutation.SetIndicatorID(id)
	return duo
}

// SetIndicator sets the "indicator" edge to the Indicator entity.
func (duo *DatasetUpdateOne) SetIndicator(i *Indicator) *DatasetUpdateOne {
	return duo.SetIndicatorID(i.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (duo *DatasetUpdateOne) SetUserID(id int) *DatasetUpdateOne {
	duo.mutation.SetUserID(id)
	return duo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableUserID(id *int) *DatasetUpdateOne {
	if id != nil {
		duo = duo.SetUserID(*id)
	}
	return duo
}

// SetUser sets the "user" edge to the User entity.
func (duo *DatasetUpdateOne) SetUser(u *User) *DatasetUpdateOne {
	return duo.SetUserID(u.ID)
}

// Mutation returns the DatasetMutation object of the builder.
func (duo *DatasetUpdateOne) Mutation() *DatasetMutation {
	return duo.mutation
}

// ClearLeft clears all "left" edges to the Correlation entity.
func (duo *DatasetUpdateOne) ClearLeft() *DatasetUpdateOne {
	duo.mutation.ClearLeft()
	return duo
}

// RemoveLeftIDs removes the "left" edge to Correlation entities by IDs.
func (duo *DatasetUpdateOne) RemoveLeftIDs(ids ...int) *DatasetUpdateOne {
	duo.mutation.RemoveLeftIDs(ids...)
	return duo
}

// RemoveLeft removes "left" edges to Correlation entities.
func (duo *DatasetUpdateOne) RemoveLeft(c ...*Correlation) *DatasetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.RemoveLeftIDs(ids...)
}

// ClearRight clears all "right" edges to the Correlation entity.
func (duo *DatasetUpdateOne) ClearRight() *DatasetUpdateOne {
	duo.mutation.ClearRight()
	return duo
}

// RemoveRightIDs removes the "right" edge to Correlation entities by IDs.
func (duo *DatasetUpdateOne) RemoveRightIDs(ids ...int) *DatasetUpdateOne {
	duo.mutation.RemoveRightIDs(ids...)
	return duo
}

// RemoveRight removes "right" edges to Correlation entities.
func (duo *DatasetUpdateOne) RemoveRight(c ...*Correlation) *DatasetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.RemoveRightIDs(ids...)
}

// ClearObservations clears all "observations" edges to the Observation entity.
func (duo *DatasetUpdateOne) ClearObservations() *DatasetUpdateOne {
	duo.mutation.ClearObservations()
	return duo
}

// RemoveObservationIDs removes the "observations" edge to Observation entities by IDs.
func (duo *DatasetUpdateOne) RemoveObservationIDs(ids ...int) *DatasetUpdateOne {
	duo.mutation.RemoveObservationIDs(ids...)
	return duo
}

// RemoveObservations removes "observations" edges to Observation entities.
func (duo *DatasetUpdateOne) RemoveObservations(o ...*Observation) *DatasetUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return duo.RemoveObservationIDs(ids...)
}

// ClearIndicator clears the "indicator" edge to the Indicator entity.
func (duo *DatasetUpdateOne) ClearIndicator() *DatasetUpdateOne {
	duo.mutation.ClearIndicator()
	return duo
}

// ClearUser clears the "user" edge to the User entity.
func (duo *DatasetUpdateOne) ClearUser() *DatasetUpdateOne {
	duo.mutation.ClearUser()
	return duo
}

// Save executes the query and returns the updated Dataset entity.
func (duo *DatasetUpdateOne) Save(ctx context.Context) (*Dataset, error) {
	var (
		err  error
		node *Dataset
	)
	duo.defaults()
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatasetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DatasetUpdateOne) SaveX(ctx context.Context) *Dataset {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DatasetUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DatasetUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DatasetUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdateTime(); !ok {
		v := dataset.UpdateDefaultUpdateTime()
		duo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DatasetUpdateOne) check() error {
	if _, ok := duo.mutation.IndicatorID(); duo.mutation.IndicatorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"indicator\"")
	}
	return nil
}

func (duo *DatasetUpdateOne) sqlSave(ctx context.Context) (_node *Dataset, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dataset.Table,
			Columns: dataset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dataset.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Dataset.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dataset.FieldUpdateTime,
		})
	}
	if value, ok := duo.mutation.Shared(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dataset.FieldShared,
		})
	}
	if value, ok := duo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataset.FieldSource,
		})
	}
	if duo.mutation.SourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dataset.FieldSource,
		})
	}
	if duo.mutation.LeftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.LeftTable,
			Columns: []string{dataset.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedLeftIDs(); len(nodes) > 0 && !duo.mutation.LeftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.LeftTable,
			Columns: []string{dataset.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.LeftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.LeftTable,
			Columns: []string{dataset.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.RightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.RightTable,
			Columns: []string{dataset.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedRightIDs(); len(nodes) > 0 && !duo.mutation.RightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.RightTable,
			Columns: []string{dataset.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.RightTable,
			Columns: []string{dataset.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: correlation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ObservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ObservationsTable,
			Columns: []string{dataset.ObservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: observation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedObservationsIDs(); len(nodes) > 0 && !duo.mutation.ObservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ObservationsTable,
			Columns: []string{dataset.ObservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: observation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ObservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ObservationsTable,
			Columns: []string{dataset.ObservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: observation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.IndicatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.IndicatorTable,
			Columns: []string{dataset.IndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: indicator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.IndicatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.IndicatorTable,
			Columns: []string{dataset.IndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: indicator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.UserTable,
			Columns: []string{dataset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.UserTable,
			Columns: []string{dataset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dataset{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dataset.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
