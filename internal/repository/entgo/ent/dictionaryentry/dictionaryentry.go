// Code generated by entc, DO NOT EDIT.

package dictionaryentry

const (
	// Label holds the string label denoting the dictionaryentry type in the database.
	Label = "dictionary_entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"

	// EdgeDictionary holds the string denoting the dictionary edge name in mutations.
	EdgeDictionary = "dictionary"

	// Table holds the table name of the dictionaryentry in the database.
	Table = "dictionary_entries"
	// DictionaryTable is the table the holds the dictionary relation/edge.
	DictionaryTable = "dictionary_entries"
	// DictionaryInverseTable is the table name for the Dictionary entity.
	// It exists in this package in order to avoid circular dependency with the "dictionary" package.
	DictionaryInverseTable = "dictionaries"
	// DictionaryColumn is the table column denoting the dictionary relation/edge.
	DictionaryColumn = "dictionary_entries"
)

// Columns holds all SQL columns for dictionaryentry fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the DictionaryEntry type.
var ForeignKeys = []string{
	"dictionary_entries",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)
