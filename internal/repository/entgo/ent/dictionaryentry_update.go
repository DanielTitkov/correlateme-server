// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dictionary"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dictionaryentry"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
)

// DictionaryEntryUpdate is the builder for updating DictionaryEntry entities.
type DictionaryEntryUpdate struct {
	config
	hooks    []Hook
	mutation *DictionaryEntryMutation
}

// Where adds a new predicate for the DictionaryEntryUpdate builder.
func (deu *DictionaryEntryUpdate) Where(ps ...predicate.DictionaryEntry) *DictionaryEntryUpdate {
	deu.mutation.predicates = append(deu.mutation.predicates, ps...)
	return deu
}

// SetCode sets the "code" field.
func (deu *DictionaryEntryUpdate) SetCode(s string) *DictionaryEntryUpdate {
	deu.mutation.SetCode(s)
	return deu
}

// SetDescription sets the "description" field.
func (deu *DictionaryEntryUpdate) SetDescription(s string) *DictionaryEntryUpdate {
	deu.mutation.SetDescription(s)
	return deu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (deu *DictionaryEntryUpdate) SetNillableDescription(s *string) *DictionaryEntryUpdate {
	if s != nil {
		deu.SetDescription(*s)
	}
	return deu
}

// ClearDescription clears the value of the "description" field.
func (deu *DictionaryEntryUpdate) ClearDescription() *DictionaryEntryUpdate {
	deu.mutation.ClearDescription()
	return deu
}

// SetDictionaryID sets the "dictionary" edge to the Dictionary entity by ID.
func (deu *DictionaryEntryUpdate) SetDictionaryID(id int) *DictionaryEntryUpdate {
	deu.mutation.SetDictionaryID(id)
	return deu
}

// SetDictionary sets the "dictionary" edge to the Dictionary entity.
func (deu *DictionaryEntryUpdate) SetDictionary(d *Dictionary) *DictionaryEntryUpdate {
	return deu.SetDictionaryID(d.ID)
}

// Mutation returns the DictionaryEntryMutation object of the builder.
func (deu *DictionaryEntryUpdate) Mutation() *DictionaryEntryMutation {
	return deu.mutation
}

// ClearDictionary clears the "dictionary" edge to the Dictionary entity.
func (deu *DictionaryEntryUpdate) ClearDictionary() *DictionaryEntryUpdate {
	deu.mutation.ClearDictionary()
	return deu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (deu *DictionaryEntryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(deu.hooks) == 0 {
		if err = deu.check(); err != nil {
			return 0, err
		}
		affected, err = deu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictionaryEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = deu.check(); err != nil {
				return 0, err
			}
			deu.mutation = mutation
			affected, err = deu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(deu.hooks) - 1; i >= 0; i-- {
			mut = deu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, deu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (deu *DictionaryEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := deu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (deu *DictionaryEntryUpdate) Exec(ctx context.Context) error {
	_, err := deu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deu *DictionaryEntryUpdate) ExecX(ctx context.Context) {
	if err := deu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (deu *DictionaryEntryUpdate) check() error {
	if v, ok := deu.mutation.Code(); ok {
		if err := dictionaryentry.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	if _, ok := deu.mutation.DictionaryID(); deu.mutation.DictionaryCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"dictionary\"")
	}
	return nil
}

func (deu *DictionaryEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dictionaryentry.Table,
			Columns: dictionaryentry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dictionaryentry.FieldID,
			},
		},
	}
	if ps := deu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dictionaryentry.FieldCode,
		})
	}
	if value, ok := deu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dictionaryentry.FieldDescription,
		})
	}
	if deu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dictionaryentry.FieldDescription,
		})
	}
	if deu.mutation.DictionaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictionaryentry.DictionaryTable,
			Columns: []string{dictionaryentry.DictionaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dictionary.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.DictionaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictionaryentry.DictionaryTable,
			Columns: []string{dictionaryentry.DictionaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dictionary.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, deu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionaryentry.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DictionaryEntryUpdateOne is the builder for updating a single DictionaryEntry entity.
type DictionaryEntryUpdateOne struct {
	config
	hooks    []Hook
	mutation *DictionaryEntryMutation
}

// SetCode sets the "code" field.
func (deuo *DictionaryEntryUpdateOne) SetCode(s string) *DictionaryEntryUpdateOne {
	deuo.mutation.SetCode(s)
	return deuo
}

// SetDescription sets the "description" field.
func (deuo *DictionaryEntryUpdateOne) SetDescription(s string) *DictionaryEntryUpdateOne {
	deuo.mutation.SetDescription(s)
	return deuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (deuo *DictionaryEntryUpdateOne) SetNillableDescription(s *string) *DictionaryEntryUpdateOne {
	if s != nil {
		deuo.SetDescription(*s)
	}
	return deuo
}

// ClearDescription clears the value of the "description" field.
func (deuo *DictionaryEntryUpdateOne) ClearDescription() *DictionaryEntryUpdateOne {
	deuo.mutation.ClearDescription()
	return deuo
}

// SetDictionaryID sets the "dictionary" edge to the Dictionary entity by ID.
func (deuo *DictionaryEntryUpdateOne) SetDictionaryID(id int) *DictionaryEntryUpdateOne {
	deuo.mutation.SetDictionaryID(id)
	return deuo
}

// SetDictionary sets the "dictionary" edge to the Dictionary entity.
func (deuo *DictionaryEntryUpdateOne) SetDictionary(d *Dictionary) *DictionaryEntryUpdateOne {
	return deuo.SetDictionaryID(d.ID)
}

// Mutation returns the DictionaryEntryMutation object of the builder.
func (deuo *DictionaryEntryUpdateOne) Mutation() *DictionaryEntryMutation {
	return deuo.mutation
}

// ClearDictionary clears the "dictionary" edge to the Dictionary entity.
func (deuo *DictionaryEntryUpdateOne) ClearDictionary() *DictionaryEntryUpdateOne {
	deuo.mutation.ClearDictionary()
	return deuo
}

// Save executes the query and returns the updated DictionaryEntry entity.
func (deuo *DictionaryEntryUpdateOne) Save(ctx context.Context) (*DictionaryEntry, error) {
	var (
		err  error
		node *DictionaryEntry
	)
	if len(deuo.hooks) == 0 {
		if err = deuo.check(); err != nil {
			return nil, err
		}
		node, err = deuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictionaryEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = deuo.check(); err != nil {
				return nil, err
			}
			deuo.mutation = mutation
			node, err = deuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(deuo.hooks) - 1; i >= 0; i-- {
			mut = deuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, deuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (deuo *DictionaryEntryUpdateOne) SaveX(ctx context.Context) *DictionaryEntry {
	node, err := deuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (deuo *DictionaryEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := deuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deuo *DictionaryEntryUpdateOne) ExecX(ctx context.Context) {
	if err := deuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (deuo *DictionaryEntryUpdateOne) check() error {
	if v, ok := deuo.mutation.Code(); ok {
		if err := dictionaryentry.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	if _, ok := deuo.mutation.DictionaryID(); deuo.mutation.DictionaryCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"dictionary\"")
	}
	return nil
}

func (deuo *DictionaryEntryUpdateOne) sqlSave(ctx context.Context) (_node *DictionaryEntry, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dictionaryentry.Table,
			Columns: dictionaryentry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dictionaryentry.FieldID,
			},
		},
	}
	id, ok := deuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DictionaryEntry.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := deuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dictionaryentry.FieldCode,
		})
	}
	if value, ok := deuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dictionaryentry.FieldDescription,
		})
	}
	if deuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dictionaryentry.FieldDescription,
		})
	}
	if deuo.mutation.DictionaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictionaryentry.DictionaryTable,
			Columns: []string{dictionaryentry.DictionaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dictionary.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.DictionaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictionaryentry.DictionaryTable,
			Columns: []string{dictionaryentry.DictionaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dictionary.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DictionaryEntry{config: deuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, deuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionaryentry.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
