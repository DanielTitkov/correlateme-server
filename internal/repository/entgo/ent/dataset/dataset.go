// Code generated by entc, DO NOT EDIT.

package dataset

import (
	"time"
)

const (
	// Label holds the string label denoting the dataset type in the database.
	Label = "dataset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldShared holds the string denoting the shared field in the database.
	FieldShared = "shared"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"

	// EdgeLeft holds the string denoting the left edge name in mutations.
	EdgeLeft = "left"
	// EdgeRight holds the string denoting the right edge name in mutations.
	EdgeRight = "right"
	// EdgeObservations holds the string denoting the observations edge name in mutations.
	EdgeObservations = "observations"
	// EdgeStyle holds the string denoting the style edge name in mutations.
	EdgeStyle = "style"
	// EdgeIndicator holds the string denoting the indicator edge name in mutations.
	EdgeIndicator = "indicator"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"

	// Table holds the table name of the dataset in the database.
	Table = "datasets"
	// LeftTable is the table the holds the left relation/edge.
	LeftTable = "correlations"
	// LeftInverseTable is the table name for the Correlation entity.
	// It exists in this package in order to avoid circular dependency with the "correlation" package.
	LeftInverseTable = "correlations"
	// LeftColumn is the table column denoting the left relation/edge.
	LeftColumn = "dataset_left"
	// RightTable is the table the holds the right relation/edge.
	RightTable = "correlations"
	// RightInverseTable is the table name for the Correlation entity.
	// It exists in this package in order to avoid circular dependency with the "correlation" package.
	RightInverseTable = "correlations"
	// RightColumn is the table column denoting the right relation/edge.
	RightColumn = "dataset_right"
	// ObservationsTable is the table the holds the observations relation/edge.
	ObservationsTable = "observations"
	// ObservationsInverseTable is the table name for the Observation entity.
	// It exists in this package in order to avoid circular dependency with the "observation" package.
	ObservationsInverseTable = "observations"
	// ObservationsColumn is the table column denoting the observations relation/edge.
	ObservationsColumn = "dataset_observations"
	// StyleTable is the table the holds the style relation/edge.
	StyleTable = "dataset_styles"
	// StyleInverseTable is the table name for the DatasetStyle entity.
	// It exists in this package in order to avoid circular dependency with the "datasetstyle" package.
	StyleInverseTable = "dataset_styles"
	// StyleColumn is the table column denoting the style relation/edge.
	StyleColumn = "dataset_style"
	// IndicatorTable is the table the holds the indicator relation/edge.
	IndicatorTable = "datasets"
	// IndicatorInverseTable is the table name for the Indicator entity.
	// It exists in this package in order to avoid circular dependency with the "indicator" package.
	IndicatorInverseTable = "indicators"
	// IndicatorColumn is the table column denoting the indicator relation/edge.
	IndicatorColumn = "indicator_datasets"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "datasets"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_datasets"
)

// Columns holds all SQL columns for dataset fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldShared,
	FieldSource,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Dataset type.
var ForeignKeys = []string{
	"indicator_datasets",
	"user_datasets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultShared holds the default value on creation for the "shared" field.
	DefaultShared bool
)
