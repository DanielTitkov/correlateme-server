// Code generated by entc, DO NOT EDIT.

package detectionjob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Schedule applies equality check predicate on the "schedule" field. It's identical to ScheduleEQ.
func Schedule(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchedule), v))
	})
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// SiteID applies equality check predicate on the "site_id" field. It's identical to SiteIDEQ.
func SiteID(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSiteID), v))
	})
}

// Metric applies equality check predicate on the "metric" field. It's identical to MetricEQ.
func Metric(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetric), v))
	})
}

// Attribute applies equality check predicate on the "attribute" field. It's identical to AttributeEQ.
func Attribute(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttribute), v))
	})
}

// TimeAgo applies equality check predicate on the "time_ago" field. It's identical to TimeAgoEQ.
func TimeAgo(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeAgo), v))
	})
}

// TimeStep applies equality check predicate on the "time_step" field. It's identical to TimeStepEQ.
func TimeStep(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeStep), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// ScheduleEQ applies the EQ predicate on the "schedule" field.
func ScheduleEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchedule), v))
	})
}

// ScheduleNEQ applies the NEQ predicate on the "schedule" field.
func ScheduleNEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSchedule), v))
	})
}

// ScheduleIn applies the In predicate on the "schedule" field.
func ScheduleIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSchedule), v...))
	})
}

// ScheduleNotIn applies the NotIn predicate on the "schedule" field.
func ScheduleNotIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSchedule), v...))
	})
}

// ScheduleGT applies the GT predicate on the "schedule" field.
func ScheduleGT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSchedule), v))
	})
}

// ScheduleGTE applies the GTE predicate on the "schedule" field.
func ScheduleGTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSchedule), v))
	})
}

// ScheduleLT applies the LT predicate on the "schedule" field.
func ScheduleLT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSchedule), v))
	})
}

// ScheduleLTE applies the LTE predicate on the "schedule" field.
func ScheduleLTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSchedule), v))
	})
}

// ScheduleContains applies the Contains predicate on the "schedule" field.
func ScheduleContains(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSchedule), v))
	})
}

// ScheduleHasPrefix applies the HasPrefix predicate on the "schedule" field.
func ScheduleHasPrefix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSchedule), v))
	})
}

// ScheduleHasSuffix applies the HasSuffix predicate on the "schedule" field.
func ScheduleHasSuffix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSchedule), v))
	})
}

// ScheduleIsNil applies the IsNil predicate on the "schedule" field.
func ScheduleIsNil() predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSchedule)))
	})
}

// ScheduleNotNil applies the NotNil predicate on the "schedule" field.
func ScheduleNotNil() predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSchedule)))
	})
}

// ScheduleEqualFold applies the EqualFold predicate on the "schedule" field.
func ScheduleEqualFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSchedule), v))
	})
}

// ScheduleContainsFold applies the ContainsFold predicate on the "schedule" field.
func ScheduleContainsFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSchedule), v))
	})
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethod), v))
	})
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMethod), v...))
	})
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMethod), v...))
	})
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethod), v))
	})
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethod), v))
	})
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethod), v))
	})
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethod), v))
	})
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMethod), v))
	})
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMethod), v))
	})
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMethod), v))
	})
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMethod), v))
	})
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMethod), v))
	})
}

// SiteIDEQ applies the EQ predicate on the "site_id" field.
func SiteIDEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSiteID), v))
	})
}

// SiteIDNEQ applies the NEQ predicate on the "site_id" field.
func SiteIDNEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSiteID), v))
	})
}

// SiteIDIn applies the In predicate on the "site_id" field.
func SiteIDIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSiteID), v...))
	})
}

// SiteIDNotIn applies the NotIn predicate on the "site_id" field.
func SiteIDNotIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSiteID), v...))
	})
}

// SiteIDGT applies the GT predicate on the "site_id" field.
func SiteIDGT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSiteID), v))
	})
}

// SiteIDGTE applies the GTE predicate on the "site_id" field.
func SiteIDGTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSiteID), v))
	})
}

// SiteIDLT applies the LT predicate on the "site_id" field.
func SiteIDLT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSiteID), v))
	})
}

// SiteIDLTE applies the LTE predicate on the "site_id" field.
func SiteIDLTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSiteID), v))
	})
}

// SiteIDContains applies the Contains predicate on the "site_id" field.
func SiteIDContains(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSiteID), v))
	})
}

// SiteIDHasPrefix applies the HasPrefix predicate on the "site_id" field.
func SiteIDHasPrefix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSiteID), v))
	})
}

// SiteIDHasSuffix applies the HasSuffix predicate on the "site_id" field.
func SiteIDHasSuffix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSiteID), v))
	})
}

// SiteIDEqualFold applies the EqualFold predicate on the "site_id" field.
func SiteIDEqualFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSiteID), v))
	})
}

// SiteIDContainsFold applies the ContainsFold predicate on the "site_id" field.
func SiteIDContainsFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSiteID), v))
	})
}

// MetricEQ applies the EQ predicate on the "metric" field.
func MetricEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetric), v))
	})
}

// MetricNEQ applies the NEQ predicate on the "metric" field.
func MetricNEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMetric), v))
	})
}

// MetricIn applies the In predicate on the "metric" field.
func MetricIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMetric), v...))
	})
}

// MetricNotIn applies the NotIn predicate on the "metric" field.
func MetricNotIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMetric), v...))
	})
}

// MetricGT applies the GT predicate on the "metric" field.
func MetricGT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMetric), v))
	})
}

// MetricGTE applies the GTE predicate on the "metric" field.
func MetricGTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMetric), v))
	})
}

// MetricLT applies the LT predicate on the "metric" field.
func MetricLT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMetric), v))
	})
}

// MetricLTE applies the LTE predicate on the "metric" field.
func MetricLTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMetric), v))
	})
}

// MetricContains applies the Contains predicate on the "metric" field.
func MetricContains(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMetric), v))
	})
}

// MetricHasPrefix applies the HasPrefix predicate on the "metric" field.
func MetricHasPrefix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMetric), v))
	})
}

// MetricHasSuffix applies the HasSuffix predicate on the "metric" field.
func MetricHasSuffix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMetric), v))
	})
}

// MetricEqualFold applies the EqualFold predicate on the "metric" field.
func MetricEqualFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMetric), v))
	})
}

// MetricContainsFold applies the ContainsFold predicate on the "metric" field.
func MetricContainsFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMetric), v))
	})
}

// AttributeEQ applies the EQ predicate on the "attribute" field.
func AttributeEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttribute), v))
	})
}

// AttributeNEQ applies the NEQ predicate on the "attribute" field.
func AttributeNEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttribute), v))
	})
}

// AttributeIn applies the In predicate on the "attribute" field.
func AttributeIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAttribute), v...))
	})
}

// AttributeNotIn applies the NotIn predicate on the "attribute" field.
func AttributeNotIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAttribute), v...))
	})
}

// AttributeGT applies the GT predicate on the "attribute" field.
func AttributeGT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAttribute), v))
	})
}

// AttributeGTE applies the GTE predicate on the "attribute" field.
func AttributeGTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAttribute), v))
	})
}

// AttributeLT applies the LT predicate on the "attribute" field.
func AttributeLT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAttribute), v))
	})
}

// AttributeLTE applies the LTE predicate on the "attribute" field.
func AttributeLTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAttribute), v))
	})
}

// AttributeContains applies the Contains predicate on the "attribute" field.
func AttributeContains(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAttribute), v))
	})
}

// AttributeHasPrefix applies the HasPrefix predicate on the "attribute" field.
func AttributeHasPrefix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAttribute), v))
	})
}

// AttributeHasSuffix applies the HasSuffix predicate on the "attribute" field.
func AttributeHasSuffix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAttribute), v))
	})
}

// AttributeEqualFold applies the EqualFold predicate on the "attribute" field.
func AttributeEqualFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAttribute), v))
	})
}

// AttributeContainsFold applies the ContainsFold predicate on the "attribute" field.
func AttributeContainsFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAttribute), v))
	})
}

// TimeAgoEQ applies the EQ predicate on the "time_ago" field.
func TimeAgoEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeAgo), v))
	})
}

// TimeAgoNEQ applies the NEQ predicate on the "time_ago" field.
func TimeAgoNEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeAgo), v))
	})
}

// TimeAgoIn applies the In predicate on the "time_ago" field.
func TimeAgoIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimeAgo), v...))
	})
}

// TimeAgoNotIn applies the NotIn predicate on the "time_ago" field.
func TimeAgoNotIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimeAgo), v...))
	})
}

// TimeAgoGT applies the GT predicate on the "time_ago" field.
func TimeAgoGT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeAgo), v))
	})
}

// TimeAgoGTE applies the GTE predicate on the "time_ago" field.
func TimeAgoGTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeAgo), v))
	})
}

// TimeAgoLT applies the LT predicate on the "time_ago" field.
func TimeAgoLT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeAgo), v))
	})
}

// TimeAgoLTE applies the LTE predicate on the "time_ago" field.
func TimeAgoLTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeAgo), v))
	})
}

// TimeAgoContains applies the Contains predicate on the "time_ago" field.
func TimeAgoContains(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTimeAgo), v))
	})
}

// TimeAgoHasPrefix applies the HasPrefix predicate on the "time_ago" field.
func TimeAgoHasPrefix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTimeAgo), v))
	})
}

// TimeAgoHasSuffix applies the HasSuffix predicate on the "time_ago" field.
func TimeAgoHasSuffix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTimeAgo), v))
	})
}

// TimeAgoEqualFold applies the EqualFold predicate on the "time_ago" field.
func TimeAgoEqualFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTimeAgo), v))
	})
}

// TimeAgoContainsFold applies the ContainsFold predicate on the "time_ago" field.
func TimeAgoContainsFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTimeAgo), v))
	})
}

// TimeStepEQ applies the EQ predicate on the "time_step" field.
func TimeStepEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeStep), v))
	})
}

// TimeStepNEQ applies the NEQ predicate on the "time_step" field.
func TimeStepNEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeStep), v))
	})
}

// TimeStepIn applies the In predicate on the "time_step" field.
func TimeStepIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimeStep), v...))
	})
}

// TimeStepNotIn applies the NotIn predicate on the "time_step" field.
func TimeStepNotIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimeStep), v...))
	})
}

// TimeStepGT applies the GT predicate on the "time_step" field.
func TimeStepGT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeStep), v))
	})
}

// TimeStepGTE applies the GTE predicate on the "time_step" field.
func TimeStepGTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeStep), v))
	})
}

// TimeStepLT applies the LT predicate on the "time_step" field.
func TimeStepLT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeStep), v))
	})
}

// TimeStepLTE applies the LTE predicate on the "time_step" field.
func TimeStepLTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeStep), v))
	})
}

// TimeStepContains applies the Contains predicate on the "time_step" field.
func TimeStepContains(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTimeStep), v))
	})
}

// TimeStepHasPrefix applies the HasPrefix predicate on the "time_step" field.
func TimeStepHasPrefix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTimeStep), v))
	})
}

// TimeStepHasSuffix applies the HasSuffix predicate on the "time_step" field.
func TimeStepHasSuffix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTimeStep), v))
	})
}

// TimeStepEqualFold applies the EqualFold predicate on the "time_step" field.
func TimeStepEqualFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTimeStep), v))
	})
}

// TimeStepContainsFold applies the ContainsFold predicate on the "time_step" field.
func TimeStepContainsFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTimeStep), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.DetectionJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DetectionJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// HasInstance applies the HasEdge predicate on the "instance" edge.
func HasInstance() predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstanceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstanceWith applies the HasEdge predicate on the "instance" edge with a given conditions (other predicates).
func HasInstanceWith(preds ...predicate.DetectionJobInstance) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstanceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DetectionJob) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DetectionJob) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DetectionJob) predicate.DetectionJob {
	return predicate.DetectionJob(func(s *sql.Selector) {
		p(s.Not())
	})
}
