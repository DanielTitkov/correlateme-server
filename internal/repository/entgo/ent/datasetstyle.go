// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/correlateme-server/internal/domain"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dataset"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/datasetstyle"
)

// DatasetStyle is the model entity for the DatasetStyle schema.
type DatasetStyle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Style holds the value of the "style" field.
	Style domain.DatasetStyle `json:"style,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DatasetStyleQuery when eager-loading is set.
	Edges         DatasetStyleEdges `json:"edges"`
	dataset_style *int
}

// DatasetStyleEdges holds the relations/edges for other nodes in the graph.
type DatasetStyleEdges struct {
	// Dataset holds the value of the dataset edge.
	Dataset *Dataset `json:"dataset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DatasetOrErr returns the Dataset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DatasetStyleEdges) DatasetOrErr() (*Dataset, error) {
	if e.loadedTypes[0] {
		if e.Dataset == nil {
			// The edge dataset was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dataset.Label}
		}
		return e.Dataset, nil
	}
	return nil, &NotLoadedError{edge: "dataset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DatasetStyle) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case datasetstyle.FieldStyle:
			values[i] = &[]byte{}
		case datasetstyle.FieldID:
			values[i] = &sql.NullInt64{}
		case datasetstyle.ForeignKeys[0]: // dataset_style
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type DatasetStyle", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DatasetStyle fields.
func (ds *DatasetStyle) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case datasetstyle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ds.ID = int(value.Int64)
		case datasetstyle.FieldStyle:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field style", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ds.Style); err != nil {
					return fmt.Errorf("unmarshal field style: %v", err)
				}
			}
		case datasetstyle.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field dataset_style", value)
			} else if value.Valid {
				ds.dataset_style = new(int)
				*ds.dataset_style = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDataset queries the "dataset" edge of the DatasetStyle entity.
func (ds *DatasetStyle) QueryDataset() *DatasetQuery {
	return (&DatasetStyleClient{config: ds.config}).QueryDataset(ds)
}

// Update returns a builder for updating this DatasetStyle.
// Note that you need to call DatasetStyle.Unwrap() before calling this method if this DatasetStyle
// was returned from a transaction, and the transaction was committed or rolled back.
func (ds *DatasetStyle) Update() *DatasetStyleUpdateOne {
	return (&DatasetStyleClient{config: ds.config}).UpdateOne(ds)
}

// Unwrap unwraps the DatasetStyle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ds *DatasetStyle) Unwrap() *DatasetStyle {
	tx, ok := ds.config.driver.(*txDriver)
	if !ok {
		panic("ent: DatasetStyle is not a transactional entity")
	}
	ds.config.driver = tx.drv
	return ds
}

// String implements the fmt.Stringer.
func (ds *DatasetStyle) String() string {
	var builder strings.Builder
	builder.WriteString("DatasetStyle(")
	builder.WriteString(fmt.Sprintf("id=%v", ds.ID))
	builder.WriteString(", style=")
	builder.WriteString(fmt.Sprintf("%v", ds.Style))
	builder.WriteByte(')')
	return builder.String()
}

// DatasetStyles is a parsable slice of DatasetStyle.
type DatasetStyles []*DatasetStyle

func (ds DatasetStyles) config(cfg config) {
	for _i := range ds {
		ds[_i].config = cfg
	}
}
