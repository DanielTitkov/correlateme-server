// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/correlation"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dataset"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
)

// CorrelationUpdate is the builder for updating Correlation entities.
type CorrelationUpdate struct {
	config
	hooks    []Hook
	mutation *CorrelationMutation
}

// Where adds a new predicate for the CorrelationUpdate builder.
func (cu *CorrelationUpdate) Where(ps ...predicate.Correlation) *CorrelationUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetCoef sets the "coef" field.
func (cu *CorrelationUpdate) SetCoef(f float64) *CorrelationUpdate {
	cu.mutation.ResetCoef()
	cu.mutation.SetCoef(f)
	return cu
}

// AddCoef adds f to the "coef" field.
func (cu *CorrelationUpdate) AddCoef(f float64) *CorrelationUpdate {
	cu.mutation.AddCoef(f)
	return cu
}

// SetP sets the "p" field.
func (cu *CorrelationUpdate) SetP(f float64) *CorrelationUpdate {
	cu.mutation.ResetP()
	cu.mutation.SetP(f)
	return cu
}

// AddP adds f to the "p" field.
func (cu *CorrelationUpdate) AddP(f float64) *CorrelationUpdate {
	cu.mutation.AddP(f)
	return cu
}

// SetR2 sets the "r2" field.
func (cu *CorrelationUpdate) SetR2(f float64) *CorrelationUpdate {
	cu.mutation.ResetR2()
	cu.mutation.SetR2(f)
	return cu
}

// AddR2 adds f to the "r2" field.
func (cu *CorrelationUpdate) AddR2(f float64) *CorrelationUpdate {
	cu.mutation.AddR2(f)
	return cu
}

// SetLeftID sets the "left" edge to the Dataset entity by ID.
func (cu *CorrelationUpdate) SetLeftID(id int) *CorrelationUpdate {
	cu.mutation.SetLeftID(id)
	return cu
}

// SetLeft sets the "left" edge to the Dataset entity.
func (cu *CorrelationUpdate) SetLeft(d *Dataset) *CorrelationUpdate {
	return cu.SetLeftID(d.ID)
}

// SetRightID sets the "right" edge to the Dataset entity by ID.
func (cu *CorrelationUpdate) SetRightID(id int) *CorrelationUpdate {
	cu.mutation.SetRightID(id)
	return cu
}

// SetRight sets the "right" edge to the Dataset entity.
func (cu *CorrelationUpdate) SetRight(d *Dataset) *CorrelationUpdate {
	return cu.SetRightID(d.ID)
}

// Mutation returns the CorrelationMutation object of the builder.
func (cu *CorrelationUpdate) Mutation() *CorrelationMutation {
	return cu.mutation
}

// ClearLeft clears the "left" edge to the Dataset entity.
func (cu *CorrelationUpdate) ClearLeft() *CorrelationUpdate {
	cu.mutation.ClearLeft()
	return cu
}

// ClearRight clears the "right" edge to the Dataset entity.
func (cu *CorrelationUpdate) ClearRight() *CorrelationUpdate {
	cu.mutation.ClearRight()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CorrelationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CorrelationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CorrelationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CorrelationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CorrelationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CorrelationUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := correlation.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CorrelationUpdate) check() error {
	if _, ok := cu.mutation.LeftID(); cu.mutation.LeftCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"left\"")
	}
	if _, ok := cu.mutation.RightID(); cu.mutation.RightCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"right\"")
	}
	return nil
}

func (cu *CorrelationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   correlation.Table,
			Columns: correlation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: correlation.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: correlation.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.Coef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldCoef,
		})
	}
	if value, ok := cu.mutation.AddedCoef(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldCoef,
		})
	}
	if value, ok := cu.mutation.P(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldP,
		})
	}
	if value, ok := cu.mutation.AddedP(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldP,
		})
	}
	if value, ok := cu.mutation.R2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldR2,
		})
	}
	if value, ok := cu.mutation.AddedR2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldR2,
		})
	}
	if cu.mutation.LeftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   correlation.LeftTable,
			Columns: []string{correlation.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LeftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   correlation.LeftTable,
			Columns: []string{correlation.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   correlation.RightTable,
			Columns: []string{correlation.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   correlation.RightTable,
			Columns: []string{correlation.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{correlation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CorrelationUpdateOne is the builder for updating a single Correlation entity.
type CorrelationUpdateOne struct {
	config
	hooks    []Hook
	mutation *CorrelationMutation
}

// SetCoef sets the "coef" field.
func (cuo *CorrelationUpdateOne) SetCoef(f float64) *CorrelationUpdateOne {
	cuo.mutation.ResetCoef()
	cuo.mutation.SetCoef(f)
	return cuo
}

// AddCoef adds f to the "coef" field.
func (cuo *CorrelationUpdateOne) AddCoef(f float64) *CorrelationUpdateOne {
	cuo.mutation.AddCoef(f)
	return cuo
}

// SetP sets the "p" field.
func (cuo *CorrelationUpdateOne) SetP(f float64) *CorrelationUpdateOne {
	cuo.mutation.ResetP()
	cuo.mutation.SetP(f)
	return cuo
}

// AddP adds f to the "p" field.
func (cuo *CorrelationUpdateOne) AddP(f float64) *CorrelationUpdateOne {
	cuo.mutation.AddP(f)
	return cuo
}

// SetR2 sets the "r2" field.
func (cuo *CorrelationUpdateOne) SetR2(f float64) *CorrelationUpdateOne {
	cuo.mutation.ResetR2()
	cuo.mutation.SetR2(f)
	return cuo
}

// AddR2 adds f to the "r2" field.
func (cuo *CorrelationUpdateOne) AddR2(f float64) *CorrelationUpdateOne {
	cuo.mutation.AddR2(f)
	return cuo
}

// SetLeftID sets the "left" edge to the Dataset entity by ID.
func (cuo *CorrelationUpdateOne) SetLeftID(id int) *CorrelationUpdateOne {
	cuo.mutation.SetLeftID(id)
	return cuo
}

// SetLeft sets the "left" edge to the Dataset entity.
func (cuo *CorrelationUpdateOne) SetLeft(d *Dataset) *CorrelationUpdateOne {
	return cuo.SetLeftID(d.ID)
}

// SetRightID sets the "right" edge to the Dataset entity by ID.
func (cuo *CorrelationUpdateOne) SetRightID(id int) *CorrelationUpdateOne {
	cuo.mutation.SetRightID(id)
	return cuo
}

// SetRight sets the "right" edge to the Dataset entity.
func (cuo *CorrelationUpdateOne) SetRight(d *Dataset) *CorrelationUpdateOne {
	return cuo.SetRightID(d.ID)
}

// Mutation returns the CorrelationMutation object of the builder.
func (cuo *CorrelationUpdateOne) Mutation() *CorrelationMutation {
	return cuo.mutation
}

// ClearLeft clears the "left" edge to the Dataset entity.
func (cuo *CorrelationUpdateOne) ClearLeft() *CorrelationUpdateOne {
	cuo.mutation.ClearLeft()
	return cuo
}

// ClearRight clears the "right" edge to the Dataset entity.
func (cuo *CorrelationUpdateOne) ClearRight() *CorrelationUpdateOne {
	cuo.mutation.ClearRight()
	return cuo
}

// Save executes the query and returns the updated Correlation entity.
func (cuo *CorrelationUpdateOne) Save(ctx context.Context) (*Correlation, error) {
	var (
		err  error
		node *Correlation
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CorrelationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CorrelationUpdateOne) SaveX(ctx context.Context) *Correlation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CorrelationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CorrelationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CorrelationUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := correlation.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CorrelationUpdateOne) check() error {
	if _, ok := cuo.mutation.LeftID(); cuo.mutation.LeftCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"left\"")
	}
	if _, ok := cuo.mutation.RightID(); cuo.mutation.RightCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"right\"")
	}
	return nil
}

func (cuo *CorrelationUpdateOne) sqlSave(ctx context.Context) (_node *Correlation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   correlation.Table,
			Columns: correlation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: correlation.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Correlation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: correlation.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.Coef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldCoef,
		})
	}
	if value, ok := cuo.mutation.AddedCoef(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldCoef,
		})
	}
	if value, ok := cuo.mutation.P(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldP,
		})
	}
	if value, ok := cuo.mutation.AddedP(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldP,
		})
	}
	if value, ok := cuo.mutation.R2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldR2,
		})
	}
	if value, ok := cuo.mutation.AddedR2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldR2,
		})
	}
	if cuo.mutation.LeftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   correlation.LeftTable,
			Columns: []string{correlation.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LeftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   correlation.LeftTable,
			Columns: []string{correlation.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   correlation.RightTable,
			Columns: []string{correlation.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   correlation.RightTable,
			Columns: []string{correlation.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Correlation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{correlation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
