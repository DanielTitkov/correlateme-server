// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/correlation"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dataset"
)

// Correlation is the model entity for the Correlation schema.
type Correlation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Coef holds the value of the "coef" field.
	Coef float64 `json:"coef,omitempty"`
	// P holds the value of the "p" field.
	P float64 `json:"p,omitempty"`
	// R2 holds the value of the "r2" field.
	R2 float64 `json:"r2,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Granularity holds the value of the "granularity" field.
	Granularity correlation.Granularity `json:"granularity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CorrelationQuery when eager-loading is set.
	Edges         CorrelationEdges `json:"edges"`
	dataset_left  *int
	dataset_right *int
}

// CorrelationEdges holds the relations/edges for other nodes in the graph.
type CorrelationEdges struct {
	// Left holds the value of the left edge.
	Left *Dataset `json:"left,omitempty"`
	// Right holds the value of the right edge.
	Right *Dataset `json:"right,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LeftOrErr returns the Left value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CorrelationEdges) LeftOrErr() (*Dataset, error) {
	if e.loadedTypes[0] {
		if e.Left == nil {
			// The edge left was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dataset.Label}
		}
		return e.Left, nil
	}
	return nil, &NotLoadedError{edge: "left"}
}

// RightOrErr returns the Right value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CorrelationEdges) RightOrErr() (*Dataset, error) {
	if e.loadedTypes[1] {
		if e.Right == nil {
			// The edge right was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dataset.Label}
		}
		return e.Right, nil
	}
	return nil, &NotLoadedError{edge: "right"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Correlation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case correlation.FieldCoef, correlation.FieldP, correlation.FieldR2:
			values[i] = &sql.NullFloat64{}
		case correlation.FieldID:
			values[i] = &sql.NullInt64{}
		case correlation.FieldType, correlation.FieldGranularity:
			values[i] = &sql.NullString{}
		case correlation.FieldCreateTime, correlation.FieldUpdateTime:
			values[i] = &sql.NullTime{}
		case correlation.ForeignKeys[0]: // dataset_left
			values[i] = &sql.NullInt64{}
		case correlation.ForeignKeys[1]: // dataset_right
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Correlation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Correlation fields.
func (c *Correlation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case correlation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case correlation.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case correlation.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case correlation.FieldCoef:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field coef", values[i])
			} else if value.Valid {
				c.Coef = value.Float64
			}
		case correlation.FieldP:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field p", values[i])
			} else if value.Valid {
				c.P = value.Float64
			}
		case correlation.FieldR2:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field r2", values[i])
			} else if value.Valid {
				c.R2 = value.Float64
			}
		case correlation.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case correlation.FieldGranularity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field granularity", values[i])
			} else if value.Valid {
				c.Granularity = correlation.Granularity(value.String)
			}
		case correlation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field dataset_left", value)
			} else if value.Valid {
				c.dataset_left = new(int)
				*c.dataset_left = int(value.Int64)
			}
		case correlation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field dataset_right", value)
			} else if value.Valid {
				c.dataset_right = new(int)
				*c.dataset_right = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryLeft queries the "left" edge of the Correlation entity.
func (c *Correlation) QueryLeft() *DatasetQuery {
	return (&CorrelationClient{config: c.config}).QueryLeft(c)
}

// QueryRight queries the "right" edge of the Correlation entity.
func (c *Correlation) QueryRight() *DatasetQuery {
	return (&CorrelationClient{config: c.config}).QueryRight(c)
}

// Update returns a builder for updating this Correlation.
// Note that you need to call Correlation.Unwrap() before calling this method if this Correlation
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Correlation) Update() *CorrelationUpdateOne {
	return (&CorrelationClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Correlation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Correlation) Unwrap() *Correlation {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Correlation is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Correlation) String() string {
	var builder strings.Builder
	builder.WriteString("Correlation(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", coef=")
	builder.WriteString(fmt.Sprintf("%v", c.Coef))
	builder.WriteString(", p=")
	builder.WriteString(fmt.Sprintf("%v", c.P))
	builder.WriteString(", r2=")
	builder.WriteString(fmt.Sprintf("%v", c.R2))
	builder.WriteString(", type=")
	builder.WriteString(c.Type)
	builder.WriteString(", granularity=")
	builder.WriteString(fmt.Sprintf("%v", c.Granularity))
	builder.WriteByte(')')
	return builder.String()
}

// Correlations is a parsable slice of Correlation.
type Correlations []*Correlation

func (c Correlations) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
