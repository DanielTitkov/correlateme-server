// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/anomaly"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjob"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjobinstance"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
)

// DetectionJobInstanceUpdate is the builder for updating DetectionJobInstance entities.
type DetectionJobInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *DetectionJobInstanceMutation
}

// Where adds a new predicate for the DetectionJobInstanceUpdate builder.
func (djiu *DetectionJobInstanceUpdate) Where(ps ...predicate.DetectionJobInstance) *DetectionJobInstanceUpdate {
	djiu.mutation.predicates = append(djiu.mutation.predicates, ps...)
	return djiu
}

// SetStartedAt sets the "started_at" field.
func (djiu *DetectionJobInstanceUpdate) SetStartedAt(t time.Time) *DetectionJobInstanceUpdate {
	djiu.mutation.SetStartedAt(t)
	return djiu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (djiu *DetectionJobInstanceUpdate) SetNillableStartedAt(t *time.Time) *DetectionJobInstanceUpdate {
	if t != nil {
		djiu.SetStartedAt(*t)
	}
	return djiu
}

// ClearStartedAt clears the value of the "started_at" field.
func (djiu *DetectionJobInstanceUpdate) ClearStartedAt() *DetectionJobInstanceUpdate {
	djiu.mutation.ClearStartedAt()
	return djiu
}

// SetFinishedAt sets the "finished_at" field.
func (djiu *DetectionJobInstanceUpdate) SetFinishedAt(t time.Time) *DetectionJobInstanceUpdate {
	djiu.mutation.SetFinishedAt(t)
	return djiu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (djiu *DetectionJobInstanceUpdate) SetNillableFinishedAt(t *time.Time) *DetectionJobInstanceUpdate {
	if t != nil {
		djiu.SetFinishedAt(*t)
	}
	return djiu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (djiu *DetectionJobInstanceUpdate) ClearFinishedAt() *DetectionJobInstanceUpdate {
	djiu.mutation.ClearFinishedAt()
	return djiu
}

// AddAnomalyIDs adds the "anomalies" edge to the Anomaly entity by IDs.
func (djiu *DetectionJobInstanceUpdate) AddAnomalyIDs(ids ...int) *DetectionJobInstanceUpdate {
	djiu.mutation.AddAnomalyIDs(ids...)
	return djiu
}

// AddAnomalies adds the "anomalies" edges to the Anomaly entity.
func (djiu *DetectionJobInstanceUpdate) AddAnomalies(a ...*Anomaly) *DetectionJobInstanceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return djiu.AddAnomalyIDs(ids...)
}

// SetDetectionJobID sets the "detection_job" edge to the DetectionJob entity by ID.
func (djiu *DetectionJobInstanceUpdate) SetDetectionJobID(id int) *DetectionJobInstanceUpdate {
	djiu.mutation.SetDetectionJobID(id)
	return djiu
}

// SetDetectionJob sets the "detection_job" edge to the DetectionJob entity.
func (djiu *DetectionJobInstanceUpdate) SetDetectionJob(d *DetectionJob) *DetectionJobInstanceUpdate {
	return djiu.SetDetectionJobID(d.ID)
}

// Mutation returns the DetectionJobInstanceMutation object of the builder.
func (djiu *DetectionJobInstanceUpdate) Mutation() *DetectionJobInstanceMutation {
	return djiu.mutation
}

// ClearAnomalies clears all "anomalies" edges to the Anomaly entity.
func (djiu *DetectionJobInstanceUpdate) ClearAnomalies() *DetectionJobInstanceUpdate {
	djiu.mutation.ClearAnomalies()
	return djiu
}

// RemoveAnomalyIDs removes the "anomalies" edge to Anomaly entities by IDs.
func (djiu *DetectionJobInstanceUpdate) RemoveAnomalyIDs(ids ...int) *DetectionJobInstanceUpdate {
	djiu.mutation.RemoveAnomalyIDs(ids...)
	return djiu
}

// RemoveAnomalies removes "anomalies" edges to Anomaly entities.
func (djiu *DetectionJobInstanceUpdate) RemoveAnomalies(a ...*Anomaly) *DetectionJobInstanceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return djiu.RemoveAnomalyIDs(ids...)
}

// ClearDetectionJob clears the "detection_job" edge to the DetectionJob entity.
func (djiu *DetectionJobInstanceUpdate) ClearDetectionJob() *DetectionJobInstanceUpdate {
	djiu.mutation.ClearDetectionJob()
	return djiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (djiu *DetectionJobInstanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	djiu.defaults()
	if len(djiu.hooks) == 0 {
		if err = djiu.check(); err != nil {
			return 0, err
		}
		affected, err = djiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DetectionJobInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = djiu.check(); err != nil {
				return 0, err
			}
			djiu.mutation = mutation
			affected, err = djiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(djiu.hooks) - 1; i >= 0; i-- {
			mut = djiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, djiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (djiu *DetectionJobInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := djiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (djiu *DetectionJobInstanceUpdate) Exec(ctx context.Context) error {
	_, err := djiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (djiu *DetectionJobInstanceUpdate) ExecX(ctx context.Context) {
	if err := djiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (djiu *DetectionJobInstanceUpdate) defaults() {
	if _, ok := djiu.mutation.UpdateTime(); !ok {
		v := detectionjobinstance.UpdateDefaultUpdateTime()
		djiu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (djiu *DetectionJobInstanceUpdate) check() error {
	if _, ok := djiu.mutation.DetectionJobID(); djiu.mutation.DetectionJobCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"detection_job\"")
	}
	return nil
}

func (djiu *DetectionJobInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   detectionjobinstance.Table,
			Columns: detectionjobinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: detectionjobinstance.FieldID,
			},
		},
	}
	if ps := djiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := djiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjobinstance.FieldUpdateTime,
		})
	}
	if value, ok := djiu.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjobinstance.FieldStartedAt,
		})
	}
	if djiu.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: detectionjobinstance.FieldStartedAt,
		})
	}
	if value, ok := djiu.mutation.FinishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjobinstance.FieldFinishedAt,
		})
	}
	if djiu.mutation.FinishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: detectionjobinstance.FieldFinishedAt,
		})
	}
	if djiu.mutation.AnomaliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjobinstance.AnomaliesTable,
			Columns: []string{detectionjobinstance.AnomaliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: anomaly.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := djiu.mutation.RemovedAnomaliesIDs(); len(nodes) > 0 && !djiu.mutation.AnomaliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjobinstance.AnomaliesTable,
			Columns: []string{detectionjobinstance.AnomaliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: anomaly.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := djiu.mutation.AnomaliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjobinstance.AnomaliesTable,
			Columns: []string{detectionjobinstance.AnomaliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: anomaly.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if djiu.mutation.DetectionJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detectionjobinstance.DetectionJobTable,
			Columns: []string{detectionjobinstance.DetectionJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := djiu.mutation.DetectionJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detectionjobinstance.DetectionJobTable,
			Columns: []string{detectionjobinstance.DetectionJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, djiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{detectionjobinstance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DetectionJobInstanceUpdateOne is the builder for updating a single DetectionJobInstance entity.
type DetectionJobInstanceUpdateOne struct {
	config
	hooks    []Hook
	mutation *DetectionJobInstanceMutation
}

// SetStartedAt sets the "started_at" field.
func (djiuo *DetectionJobInstanceUpdateOne) SetStartedAt(t time.Time) *DetectionJobInstanceUpdateOne {
	djiuo.mutation.SetStartedAt(t)
	return djiuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (djiuo *DetectionJobInstanceUpdateOne) SetNillableStartedAt(t *time.Time) *DetectionJobInstanceUpdateOne {
	if t != nil {
		djiuo.SetStartedAt(*t)
	}
	return djiuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (djiuo *DetectionJobInstanceUpdateOne) ClearStartedAt() *DetectionJobInstanceUpdateOne {
	djiuo.mutation.ClearStartedAt()
	return djiuo
}

// SetFinishedAt sets the "finished_at" field.
func (djiuo *DetectionJobInstanceUpdateOne) SetFinishedAt(t time.Time) *DetectionJobInstanceUpdateOne {
	djiuo.mutation.SetFinishedAt(t)
	return djiuo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (djiuo *DetectionJobInstanceUpdateOne) SetNillableFinishedAt(t *time.Time) *DetectionJobInstanceUpdateOne {
	if t != nil {
		djiuo.SetFinishedAt(*t)
	}
	return djiuo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (djiuo *DetectionJobInstanceUpdateOne) ClearFinishedAt() *DetectionJobInstanceUpdateOne {
	djiuo.mutation.ClearFinishedAt()
	return djiuo
}

// AddAnomalyIDs adds the "anomalies" edge to the Anomaly entity by IDs.
func (djiuo *DetectionJobInstanceUpdateOne) AddAnomalyIDs(ids ...int) *DetectionJobInstanceUpdateOne {
	djiuo.mutation.AddAnomalyIDs(ids...)
	return djiuo
}

// AddAnomalies adds the "anomalies" edges to the Anomaly entity.
func (djiuo *DetectionJobInstanceUpdateOne) AddAnomalies(a ...*Anomaly) *DetectionJobInstanceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return djiuo.AddAnomalyIDs(ids...)
}

// SetDetectionJobID sets the "detection_job" edge to the DetectionJob entity by ID.
func (djiuo *DetectionJobInstanceUpdateOne) SetDetectionJobID(id int) *DetectionJobInstanceUpdateOne {
	djiuo.mutation.SetDetectionJobID(id)
	return djiuo
}

// SetDetectionJob sets the "detection_job" edge to the DetectionJob entity.
func (djiuo *DetectionJobInstanceUpdateOne) SetDetectionJob(d *DetectionJob) *DetectionJobInstanceUpdateOne {
	return djiuo.SetDetectionJobID(d.ID)
}

// Mutation returns the DetectionJobInstanceMutation object of the builder.
func (djiuo *DetectionJobInstanceUpdateOne) Mutation() *DetectionJobInstanceMutation {
	return djiuo.mutation
}

// ClearAnomalies clears all "anomalies" edges to the Anomaly entity.
func (djiuo *DetectionJobInstanceUpdateOne) ClearAnomalies() *DetectionJobInstanceUpdateOne {
	djiuo.mutation.ClearAnomalies()
	return djiuo
}

// RemoveAnomalyIDs removes the "anomalies" edge to Anomaly entities by IDs.
func (djiuo *DetectionJobInstanceUpdateOne) RemoveAnomalyIDs(ids ...int) *DetectionJobInstanceUpdateOne {
	djiuo.mutation.RemoveAnomalyIDs(ids...)
	return djiuo
}

// RemoveAnomalies removes "anomalies" edges to Anomaly entities.
func (djiuo *DetectionJobInstanceUpdateOne) RemoveAnomalies(a ...*Anomaly) *DetectionJobInstanceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return djiuo.RemoveAnomalyIDs(ids...)
}

// ClearDetectionJob clears the "detection_job" edge to the DetectionJob entity.
func (djiuo *DetectionJobInstanceUpdateOne) ClearDetectionJob() *DetectionJobInstanceUpdateOne {
	djiuo.mutation.ClearDetectionJob()
	return djiuo
}

// Save executes the query and returns the updated DetectionJobInstance entity.
func (djiuo *DetectionJobInstanceUpdateOne) Save(ctx context.Context) (*DetectionJobInstance, error) {
	var (
		err  error
		node *DetectionJobInstance
	)
	djiuo.defaults()
	if len(djiuo.hooks) == 0 {
		if err = djiuo.check(); err != nil {
			return nil, err
		}
		node, err = djiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DetectionJobInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = djiuo.check(); err != nil {
				return nil, err
			}
			djiuo.mutation = mutation
			node, err = djiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(djiuo.hooks) - 1; i >= 0; i-- {
			mut = djiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, djiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (djiuo *DetectionJobInstanceUpdateOne) SaveX(ctx context.Context) *DetectionJobInstance {
	node, err := djiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (djiuo *DetectionJobInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := djiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (djiuo *DetectionJobInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := djiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (djiuo *DetectionJobInstanceUpdateOne) defaults() {
	if _, ok := djiuo.mutation.UpdateTime(); !ok {
		v := detectionjobinstance.UpdateDefaultUpdateTime()
		djiuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (djiuo *DetectionJobInstanceUpdateOne) check() error {
	if _, ok := djiuo.mutation.DetectionJobID(); djiuo.mutation.DetectionJobCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"detection_job\"")
	}
	return nil
}

func (djiuo *DetectionJobInstanceUpdateOne) sqlSave(ctx context.Context) (_node *DetectionJobInstance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   detectionjobinstance.Table,
			Columns: detectionjobinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: detectionjobinstance.FieldID,
			},
		},
	}
	id, ok := djiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DetectionJobInstance.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := djiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := djiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjobinstance.FieldUpdateTime,
		})
	}
	if value, ok := djiuo.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjobinstance.FieldStartedAt,
		})
	}
	if djiuo.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: detectionjobinstance.FieldStartedAt,
		})
	}
	if value, ok := djiuo.mutation.FinishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjobinstance.FieldFinishedAt,
		})
	}
	if djiuo.mutation.FinishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: detectionjobinstance.FieldFinishedAt,
		})
	}
	if djiuo.mutation.AnomaliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjobinstance.AnomaliesTable,
			Columns: []string{detectionjobinstance.AnomaliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: anomaly.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := djiuo.mutation.RemovedAnomaliesIDs(); len(nodes) > 0 && !djiuo.mutation.AnomaliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjobinstance.AnomaliesTable,
			Columns: []string{detectionjobinstance.AnomaliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: anomaly.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := djiuo.mutation.AnomaliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjobinstance.AnomaliesTable,
			Columns: []string{detectionjobinstance.AnomaliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: anomaly.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if djiuo.mutation.DetectionJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detectionjobinstance.DetectionJobTable,
			Columns: []string{detectionjobinstance.DetectionJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := djiuo.mutation.DetectionJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detectionjobinstance.DetectionJobTable,
			Columns: []string{detectionjobinstance.DetectionJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DetectionJobInstance{config: djiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, djiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{detectionjobinstance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
