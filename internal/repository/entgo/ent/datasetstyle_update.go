// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/domain"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dataset"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/datasetstyle"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
)

// DatasetStyleUpdate is the builder for updating DatasetStyle entities.
type DatasetStyleUpdate struct {
	config
	hooks    []Hook
	mutation *DatasetStyleMutation
}

// Where adds a new predicate for the DatasetStyleUpdate builder.
func (dsu *DatasetStyleUpdate) Where(ps ...predicate.DatasetStyle) *DatasetStyleUpdate {
	dsu.mutation.predicates = append(dsu.mutation.predicates, ps...)
	return dsu
}

// SetStyle sets the "style" field.
func (dsu *DatasetStyleUpdate) SetStyle(ds domain.DatasetStyle) *DatasetStyleUpdate {
	dsu.mutation.SetStyle(ds)
	return dsu
}

// SetDatasetID sets the "dataset" edge to the Dataset entity by ID.
func (dsu *DatasetStyleUpdate) SetDatasetID(id int) *DatasetStyleUpdate {
	dsu.mutation.SetDatasetID(id)
	return dsu
}

// SetDataset sets the "dataset" edge to the Dataset entity.
func (dsu *DatasetStyleUpdate) SetDataset(d *Dataset) *DatasetStyleUpdate {
	return dsu.SetDatasetID(d.ID)
}

// Mutation returns the DatasetStyleMutation object of the builder.
func (dsu *DatasetStyleUpdate) Mutation() *DatasetStyleMutation {
	return dsu.mutation
}

// ClearDataset clears the "dataset" edge to the Dataset entity.
func (dsu *DatasetStyleUpdate) ClearDataset() *DatasetStyleUpdate {
	dsu.mutation.ClearDataset()
	return dsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dsu *DatasetStyleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dsu.hooks) == 0 {
		if err = dsu.check(); err != nil {
			return 0, err
		}
		affected, err = dsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatasetStyleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsu.check(); err != nil {
				return 0, err
			}
			dsu.mutation = mutation
			affected, err = dsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dsu.hooks) - 1; i >= 0; i-- {
			mut = dsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dsu *DatasetStyleUpdate) SaveX(ctx context.Context) int {
	affected, err := dsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dsu *DatasetStyleUpdate) Exec(ctx context.Context) error {
	_, err := dsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsu *DatasetStyleUpdate) ExecX(ctx context.Context) {
	if err := dsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsu *DatasetStyleUpdate) check() error {
	if _, ok := dsu.mutation.DatasetID(); dsu.mutation.DatasetCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"dataset\"")
	}
	return nil
}

func (dsu *DatasetStyleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datasetstyle.Table,
			Columns: datasetstyle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: datasetstyle.FieldID,
			},
		},
	}
	if ps := dsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsu.mutation.Style(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: datasetstyle.FieldStyle,
		})
	}
	if dsu.mutation.DatasetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   datasetstyle.DatasetTable,
			Columns: []string{datasetstyle.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.DatasetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   datasetstyle.DatasetTable,
			Columns: []string{datasetstyle.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datasetstyle.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DatasetStyleUpdateOne is the builder for updating a single DatasetStyle entity.
type DatasetStyleUpdateOne struct {
	config
	hooks    []Hook
	mutation *DatasetStyleMutation
}

// SetStyle sets the "style" field.
func (dsuo *DatasetStyleUpdateOne) SetStyle(ds domain.DatasetStyle) *DatasetStyleUpdateOne {
	dsuo.mutation.SetStyle(ds)
	return dsuo
}

// SetDatasetID sets the "dataset" edge to the Dataset entity by ID.
func (dsuo *DatasetStyleUpdateOne) SetDatasetID(id int) *DatasetStyleUpdateOne {
	dsuo.mutation.SetDatasetID(id)
	return dsuo
}

// SetDataset sets the "dataset" edge to the Dataset entity.
func (dsuo *DatasetStyleUpdateOne) SetDataset(d *Dataset) *DatasetStyleUpdateOne {
	return dsuo.SetDatasetID(d.ID)
}

// Mutation returns the DatasetStyleMutation object of the builder.
func (dsuo *DatasetStyleUpdateOne) Mutation() *DatasetStyleMutation {
	return dsuo.mutation
}

// ClearDataset clears the "dataset" edge to the Dataset entity.
func (dsuo *DatasetStyleUpdateOne) ClearDataset() *DatasetStyleUpdateOne {
	dsuo.mutation.ClearDataset()
	return dsuo
}

// Save executes the query and returns the updated DatasetStyle entity.
func (dsuo *DatasetStyleUpdateOne) Save(ctx context.Context) (*DatasetStyle, error) {
	var (
		err  error
		node *DatasetStyle
	)
	if len(dsuo.hooks) == 0 {
		if err = dsuo.check(); err != nil {
			return nil, err
		}
		node, err = dsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatasetStyleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsuo.check(); err != nil {
				return nil, err
			}
			dsuo.mutation = mutation
			node, err = dsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dsuo.hooks) - 1; i >= 0; i-- {
			mut = dsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dsuo *DatasetStyleUpdateOne) SaveX(ctx context.Context) *DatasetStyle {
	node, err := dsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dsuo *DatasetStyleUpdateOne) Exec(ctx context.Context) error {
	_, err := dsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsuo *DatasetStyleUpdateOne) ExecX(ctx context.Context) {
	if err := dsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsuo *DatasetStyleUpdateOne) check() error {
	if _, ok := dsuo.mutation.DatasetID(); dsuo.mutation.DatasetCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"dataset\"")
	}
	return nil
}

func (dsuo *DatasetStyleUpdateOne) sqlSave(ctx context.Context) (_node *DatasetStyle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datasetstyle.Table,
			Columns: datasetstyle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: datasetstyle.FieldID,
			},
		},
	}
	id, ok := dsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DatasetStyle.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := dsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsuo.mutation.Style(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: datasetstyle.FieldStyle,
		})
	}
	if dsuo.mutation.DatasetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   datasetstyle.DatasetTable,
			Columns: []string{datasetstyle.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.DatasetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   datasetstyle.DatasetTable,
			Columns: []string{datasetstyle.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DatasetStyle{config: dsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datasetstyle.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
