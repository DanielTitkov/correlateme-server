// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/anomaly"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjobinstance"
)

// Anomaly is the model entity for the Anomaly schema.
type Anomaly struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Processed holds the value of the "processed" field.
	Processed bool `json:"processed,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart time.Time `json:"period_start,omitempty"`
	// PeriodEnd holds the value of the "period_end" field.
	PeriodEnd time.Time `json:"period_end,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnomalyQuery when eager-loading is set.
	Edges                            AnomalyEdges `json:"edges"`
	detection_job_instance_anomalies *int
}

// AnomalyEdges holds the relations/edges for other nodes in the graph.
type AnomalyEdges struct {
	// DetectionJobInstance holds the value of the detection_job_instance edge.
	DetectionJobInstance *DetectionJobInstance `json:"detection_job_instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DetectionJobInstanceOrErr returns the DetectionJobInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnomalyEdges) DetectionJobInstanceOrErr() (*DetectionJobInstance, error) {
	if e.loadedTypes[0] {
		if e.DetectionJobInstance == nil {
			// The edge detection_job_instance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: detectionjobinstance.Label}
		}
		return e.DetectionJobInstance, nil
	}
	return nil, &NotLoadedError{edge: "detection_job_instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Anomaly) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case anomaly.FieldProcessed:
			values[i] = &sql.NullBool{}
		case anomaly.FieldValue:
			values[i] = &sql.NullFloat64{}
		case anomaly.FieldID:
			values[i] = &sql.NullInt64{}
		case anomaly.FieldType:
			values[i] = &sql.NullString{}
		case anomaly.FieldCreateTime, anomaly.FieldUpdateTime, anomaly.FieldPeriodStart, anomaly.FieldPeriodEnd:
			values[i] = &sql.NullTime{}
		case anomaly.ForeignKeys[0]: // detection_job_instance_anomalies
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Anomaly", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Anomaly fields.
func (a *Anomaly) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case anomaly.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case anomaly.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case anomaly.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Time
			}
		case anomaly.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = value.String
			}
		case anomaly.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				a.Value = value.Float64
			}
		case anomaly.FieldProcessed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field processed", values[i])
			} else if value.Valid {
				a.Processed = value.Bool
			}
		case anomaly.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				a.PeriodStart = value.Time
			}
		case anomaly.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				a.PeriodEnd = value.Time
			}
		case anomaly.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field detection_job_instance_anomalies", value)
			} else if value.Valid {
				a.detection_job_instance_anomalies = new(int)
				*a.detection_job_instance_anomalies = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDetectionJobInstance queries the "detection_job_instance" edge of the Anomaly entity.
func (a *Anomaly) QueryDetectionJobInstance() *DetectionJobInstanceQuery {
	return (&AnomalyClient{config: a.config}).QueryDetectionJobInstance(a)
}

// Update returns a builder for updating this Anomaly.
// Note that you need to call Anomaly.Unwrap() before calling this method if this Anomaly
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Anomaly) Update() *AnomalyUpdateOne {
	return (&AnomalyClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Anomaly entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Anomaly) Unwrap() *Anomaly {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Anomaly is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Anomaly) String() string {
	var builder strings.Builder
	builder.WriteString("Anomaly(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", type=")
	builder.WriteString(a.Type)
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", a.Value))
	builder.WriteString(", processed=")
	builder.WriteString(fmt.Sprintf("%v", a.Processed))
	builder.WriteString(", period_start=")
	builder.WriteString(a.PeriodStart.Format(time.ANSIC))
	builder.WriteString(", period_end=")
	builder.WriteString(a.PeriodEnd.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Anomalies is a parsable slice of Anomaly.
type Anomalies []*Anomaly

func (a Anomalies) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
