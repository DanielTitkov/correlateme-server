// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicator"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicatorvaluealias"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
)

// IndicatorValueAliasUpdate is the builder for updating IndicatorValueAlias entities.
type IndicatorValueAliasUpdate struct {
	config
	hooks    []Hook
	mutation *IndicatorValueAliasMutation
}

// Where adds a new predicate for the IndicatorValueAliasUpdate builder.
func (ivau *IndicatorValueAliasUpdate) Where(ps ...predicate.IndicatorValueAlias) *IndicatorValueAliasUpdate {
	ivau.mutation.predicates = append(ivau.mutation.predicates, ps...)
	return ivau
}

// SetValueMapping sets the "value_mapping" field.
func (ivau *IndicatorValueAliasUpdate) SetValueMapping(m map[float64]string) *IndicatorValueAliasUpdate {
	ivau.mutation.SetValueMapping(m)
	return ivau
}

// ClearValueMapping clears the value of the "value_mapping" field.
func (ivau *IndicatorValueAliasUpdate) ClearValueMapping() *IndicatorValueAliasUpdate {
	ivau.mutation.ClearValueMapping()
	return ivau
}

// SetIndicatorID sets the "indicator" edge to the Indicator entity by ID.
func (ivau *IndicatorValueAliasUpdate) SetIndicatorID(id int) *IndicatorValueAliasUpdate {
	ivau.mutation.SetIndicatorID(id)
	return ivau
}

// SetIndicator sets the "indicator" edge to the Indicator entity.
func (ivau *IndicatorValueAliasUpdate) SetIndicator(i *Indicator) *IndicatorValueAliasUpdate {
	return ivau.SetIndicatorID(i.ID)
}

// Mutation returns the IndicatorValueAliasMutation object of the builder.
func (ivau *IndicatorValueAliasUpdate) Mutation() *IndicatorValueAliasMutation {
	return ivau.mutation
}

// ClearIndicator clears the "indicator" edge to the Indicator entity.
func (ivau *IndicatorValueAliasUpdate) ClearIndicator() *IndicatorValueAliasUpdate {
	ivau.mutation.ClearIndicator()
	return ivau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ivau *IndicatorValueAliasUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ivau.hooks) == 0 {
		if err = ivau.check(); err != nil {
			return 0, err
		}
		affected, err = ivau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IndicatorValueAliasMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ivau.check(); err != nil {
				return 0, err
			}
			ivau.mutation = mutation
			affected, err = ivau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ivau.hooks) - 1; i >= 0; i-- {
			mut = ivau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ivau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ivau *IndicatorValueAliasUpdate) SaveX(ctx context.Context) int {
	affected, err := ivau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ivau *IndicatorValueAliasUpdate) Exec(ctx context.Context) error {
	_, err := ivau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivau *IndicatorValueAliasUpdate) ExecX(ctx context.Context) {
	if err := ivau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivau *IndicatorValueAliasUpdate) check() error {
	if _, ok := ivau.mutation.IndicatorID(); ivau.mutation.IndicatorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"indicator\"")
	}
	return nil
}

func (ivau *IndicatorValueAliasUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   indicatorvaluealias.Table,
			Columns: indicatorvaluealias.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: indicatorvaluealias.FieldID,
			},
		},
	}
	if ps := ivau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ivau.mutation.ValueMapping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: indicatorvaluealias.FieldValueMapping,
		})
	}
	if ivau.mutation.ValueMappingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: indicatorvaluealias.FieldValueMapping,
		})
	}
	if ivau.mutation.IndicatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   indicatorvaluealias.IndicatorTable,
			Columns: []string{indicatorvaluealias.IndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: indicator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ivau.mutation.IndicatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   indicatorvaluealias.IndicatorTable,
			Columns: []string{indicatorvaluealias.IndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: indicator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ivau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{indicatorvaluealias.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// IndicatorValueAliasUpdateOne is the builder for updating a single IndicatorValueAlias entity.
type IndicatorValueAliasUpdateOne struct {
	config
	hooks    []Hook
	mutation *IndicatorValueAliasMutation
}

// SetValueMapping sets the "value_mapping" field.
func (ivauo *IndicatorValueAliasUpdateOne) SetValueMapping(m map[float64]string) *IndicatorValueAliasUpdateOne {
	ivauo.mutation.SetValueMapping(m)
	return ivauo
}

// ClearValueMapping clears the value of the "value_mapping" field.
func (ivauo *IndicatorValueAliasUpdateOne) ClearValueMapping() *IndicatorValueAliasUpdateOne {
	ivauo.mutation.ClearValueMapping()
	return ivauo
}

// SetIndicatorID sets the "indicator" edge to the Indicator entity by ID.
func (ivauo *IndicatorValueAliasUpdateOne) SetIndicatorID(id int) *IndicatorValueAliasUpdateOne {
	ivauo.mutation.SetIndicatorID(id)
	return ivauo
}

// SetIndicator sets the "indicator" edge to the Indicator entity.
func (ivauo *IndicatorValueAliasUpdateOne) SetIndicator(i *Indicator) *IndicatorValueAliasUpdateOne {
	return ivauo.SetIndicatorID(i.ID)
}

// Mutation returns the IndicatorValueAliasMutation object of the builder.
func (ivauo *IndicatorValueAliasUpdateOne) Mutation() *IndicatorValueAliasMutation {
	return ivauo.mutation
}

// ClearIndicator clears the "indicator" edge to the Indicator entity.
func (ivauo *IndicatorValueAliasUpdateOne) ClearIndicator() *IndicatorValueAliasUpdateOne {
	ivauo.mutation.ClearIndicator()
	return ivauo
}

// Save executes the query and returns the updated IndicatorValueAlias entity.
func (ivauo *IndicatorValueAliasUpdateOne) Save(ctx context.Context) (*IndicatorValueAlias, error) {
	var (
		err  error
		node *IndicatorValueAlias
	)
	if len(ivauo.hooks) == 0 {
		if err = ivauo.check(); err != nil {
			return nil, err
		}
		node, err = ivauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IndicatorValueAliasMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ivauo.check(); err != nil {
				return nil, err
			}
			ivauo.mutation = mutation
			node, err = ivauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ivauo.hooks) - 1; i >= 0; i-- {
			mut = ivauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ivauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ivauo *IndicatorValueAliasUpdateOne) SaveX(ctx context.Context) *IndicatorValueAlias {
	node, err := ivauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ivauo *IndicatorValueAliasUpdateOne) Exec(ctx context.Context) error {
	_, err := ivauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivauo *IndicatorValueAliasUpdateOne) ExecX(ctx context.Context) {
	if err := ivauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivauo *IndicatorValueAliasUpdateOne) check() error {
	if _, ok := ivauo.mutation.IndicatorID(); ivauo.mutation.IndicatorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"indicator\"")
	}
	return nil
}

func (ivauo *IndicatorValueAliasUpdateOne) sqlSave(ctx context.Context) (_node *IndicatorValueAlias, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   indicatorvaluealias.Table,
			Columns: indicatorvaluealias.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: indicatorvaluealias.FieldID,
			},
		},
	}
	id, ok := ivauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing IndicatorValueAlias.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ivauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ivauo.mutation.ValueMapping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: indicatorvaluealias.FieldValueMapping,
		})
	}
	if ivauo.mutation.ValueMappingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: indicatorvaluealias.FieldValueMapping,
		})
	}
	if ivauo.mutation.IndicatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   indicatorvaluealias.IndicatorTable,
			Columns: []string{indicatorvaluealias.IndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: indicator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ivauo.mutation.IndicatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   indicatorvaluealias.IndicatorTable,
			Columns: []string{indicatorvaluealias.IndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: indicator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IndicatorValueAlias{config: ivauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ivauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{indicatorvaluealias.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
