// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dataset"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/observation"
)

// Observation is the model entity for the Observation schema.
type Observation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Granularity holds the value of the "granularity" field.
	Granularity observation.Granularity `json:"granularity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ObservationQuery when eager-loading is set.
	Edges                ObservationEdges `json:"edges"`
	dataset_observations *int
}

// ObservationEdges holds the relations/edges for other nodes in the graph.
type ObservationEdges struct {
	// Dataset holds the value of the dataset edge.
	Dataset *Dataset `json:"dataset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DatasetOrErr returns the Dataset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ObservationEdges) DatasetOrErr() (*Dataset, error) {
	if e.loadedTypes[0] {
		if e.Dataset == nil {
			// The edge dataset was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dataset.Label}
		}
		return e.Dataset, nil
	}
	return nil, &NotLoadedError{edge: "dataset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Observation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case observation.FieldValue:
			values[i] = &sql.NullFloat64{}
		case observation.FieldID:
			values[i] = &sql.NullInt64{}
		case observation.FieldGranularity:
			values[i] = &sql.NullString{}
		case observation.FieldCreateTime, observation.FieldUpdateTime, observation.FieldDate:
			values[i] = &sql.NullTime{}
		case observation.ForeignKeys[0]: // dataset_observations
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Observation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Observation fields.
func (o *Observation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case observation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case observation.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case observation.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		case observation.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				o.Value = value.Float64
			}
		case observation.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				o.Date = value.Time
			}
		case observation.FieldGranularity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field granularity", values[i])
			} else if value.Valid {
				o.Granularity = observation.Granularity(value.String)
			}
		case observation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field dataset_observations", value)
			} else if value.Valid {
				o.dataset_observations = new(int)
				*o.dataset_observations = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDataset queries the "dataset" edge of the Observation entity.
func (o *Observation) QueryDataset() *DatasetQuery {
	return (&ObservationClient{config: o.config}).QueryDataset(o)
}

// Update returns a builder for updating this Observation.
// Note that you need to call Observation.Unwrap() before calling this method if this Observation
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Observation) Update() *ObservationUpdateOne {
	return (&ObservationClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Observation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Observation) Unwrap() *Observation {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Observation is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Observation) String() string {
	var builder strings.Builder
	builder.WriteString("Observation(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", o.Value))
	builder.WriteString(", date=")
	builder.WriteString(o.Date.Format(time.ANSIC))
	builder.WriteString(", granularity=")
	builder.WriteString(fmt.Sprintf("%v", o.Granularity))
	builder.WriteByte(')')
	return builder.String()
}

// Observations is a parsable slice of Observation.
type Observations []*Observation

func (o Observations) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
