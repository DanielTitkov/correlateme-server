// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/anomaly"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjob"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjobinstance"
)

// DetectionJobInstanceCreate is the builder for creating a DetectionJobInstance entity.
type DetectionJobInstanceCreate struct {
	config
	mutation *DetectionJobInstanceMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (djic *DetectionJobInstanceCreate) SetCreateTime(t time.Time) *DetectionJobInstanceCreate {
	djic.mutation.SetCreateTime(t)
	return djic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (djic *DetectionJobInstanceCreate) SetNillableCreateTime(t *time.Time) *DetectionJobInstanceCreate {
	if t != nil {
		djic.SetCreateTime(*t)
	}
	return djic
}

// SetUpdateTime sets the "update_time" field.
func (djic *DetectionJobInstanceCreate) SetUpdateTime(t time.Time) *DetectionJobInstanceCreate {
	djic.mutation.SetUpdateTime(t)
	return djic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (djic *DetectionJobInstanceCreate) SetNillableUpdateTime(t *time.Time) *DetectionJobInstanceCreate {
	if t != nil {
		djic.SetUpdateTime(*t)
	}
	return djic
}

// SetStartedAt sets the "started_at" field.
func (djic *DetectionJobInstanceCreate) SetStartedAt(t time.Time) *DetectionJobInstanceCreate {
	djic.mutation.SetStartedAt(t)
	return djic
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (djic *DetectionJobInstanceCreate) SetNillableStartedAt(t *time.Time) *DetectionJobInstanceCreate {
	if t != nil {
		djic.SetStartedAt(*t)
	}
	return djic
}

// SetFinishedAt sets the "finished_at" field.
func (djic *DetectionJobInstanceCreate) SetFinishedAt(t time.Time) *DetectionJobInstanceCreate {
	djic.mutation.SetFinishedAt(t)
	return djic
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (djic *DetectionJobInstanceCreate) SetNillableFinishedAt(t *time.Time) *DetectionJobInstanceCreate {
	if t != nil {
		djic.SetFinishedAt(*t)
	}
	return djic
}

// AddAnomalyIDs adds the "anomalies" edge to the Anomaly entity by IDs.
func (djic *DetectionJobInstanceCreate) AddAnomalyIDs(ids ...int) *DetectionJobInstanceCreate {
	djic.mutation.AddAnomalyIDs(ids...)
	return djic
}

// AddAnomalies adds the "anomalies" edges to the Anomaly entity.
func (djic *DetectionJobInstanceCreate) AddAnomalies(a ...*Anomaly) *DetectionJobInstanceCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return djic.AddAnomalyIDs(ids...)
}

// SetDetectionJobID sets the "detection_job" edge to the DetectionJob entity by ID.
func (djic *DetectionJobInstanceCreate) SetDetectionJobID(id int) *DetectionJobInstanceCreate {
	djic.mutation.SetDetectionJobID(id)
	return djic
}

// SetDetectionJob sets the "detection_job" edge to the DetectionJob entity.
func (djic *DetectionJobInstanceCreate) SetDetectionJob(d *DetectionJob) *DetectionJobInstanceCreate {
	return djic.SetDetectionJobID(d.ID)
}

// Mutation returns the DetectionJobInstanceMutation object of the builder.
func (djic *DetectionJobInstanceCreate) Mutation() *DetectionJobInstanceMutation {
	return djic.mutation
}

// Save creates the DetectionJobInstance in the database.
func (djic *DetectionJobInstanceCreate) Save(ctx context.Context) (*DetectionJobInstance, error) {
	var (
		err  error
		node *DetectionJobInstance
	)
	djic.defaults()
	if len(djic.hooks) == 0 {
		if err = djic.check(); err != nil {
			return nil, err
		}
		node, err = djic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DetectionJobInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = djic.check(); err != nil {
				return nil, err
			}
			djic.mutation = mutation
			node, err = djic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(djic.hooks) - 1; i >= 0; i-- {
			mut = djic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, djic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (djic *DetectionJobInstanceCreate) SaveX(ctx context.Context) *DetectionJobInstance {
	v, err := djic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (djic *DetectionJobInstanceCreate) defaults() {
	if _, ok := djic.mutation.CreateTime(); !ok {
		v := detectionjobinstance.DefaultCreateTime()
		djic.mutation.SetCreateTime(v)
	}
	if _, ok := djic.mutation.UpdateTime(); !ok {
		v := detectionjobinstance.DefaultUpdateTime()
		djic.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (djic *DetectionJobInstanceCreate) check() error {
	if _, ok := djic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := djic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := djic.mutation.DetectionJobID(); !ok {
		return &ValidationError{Name: "detection_job", err: errors.New("ent: missing required edge \"detection_job\"")}
	}
	return nil
}

func (djic *DetectionJobInstanceCreate) sqlSave(ctx context.Context) (*DetectionJobInstance, error) {
	_node, _spec := djic.createSpec()
	if err := sqlgraph.CreateNode(ctx, djic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (djic *DetectionJobInstanceCreate) createSpec() (*DetectionJobInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &DetectionJobInstance{config: djic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: detectionjobinstance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: detectionjobinstance.FieldID,
			},
		}
	)
	if value, ok := djic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjobinstance.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := djic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjobinstance.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := djic.mutation.StartedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjobinstance.FieldStartedAt,
		})
		_node.StartedAt = &value
	}
	if value, ok := djic.mutation.FinishedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: detectionjobinstance.FieldFinishedAt,
		})
		_node.FinishedAt = &value
	}
	if nodes := djic.mutation.AnomaliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   detectionjobinstance.AnomaliesTable,
			Columns: []string{detectionjobinstance.AnomaliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: anomaly.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := djic.mutation.DetectionJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detectionjobinstance.DetectionJobTable,
			Columns: []string{detectionjobinstance.DetectionJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DetectionJobInstanceCreateBulk is the builder for creating many DetectionJobInstance entities in bulk.
type DetectionJobInstanceCreateBulk struct {
	config
	builders []*DetectionJobInstanceCreate
}

// Save creates the DetectionJobInstance entities in the database.
func (djicb *DetectionJobInstanceCreateBulk) Save(ctx context.Context) ([]*DetectionJobInstance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(djicb.builders))
	nodes := make([]*DetectionJobInstance, len(djicb.builders))
	mutators := make([]Mutator, len(djicb.builders))
	for i := range djicb.builders {
		func(i int, root context.Context) {
			builder := djicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DetectionJobInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, djicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, djicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, djicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (djicb *DetectionJobInstanceCreateBulk) SaveX(ctx context.Context) []*DetectionJobInstance {
	v, err := djicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
