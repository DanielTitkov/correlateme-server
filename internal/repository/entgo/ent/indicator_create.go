// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dataset"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicator"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/scale"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/user"
)

// IndicatorCreate is the builder for creating a Indicator entity.
type IndicatorCreate struct {
	config
	mutation *IndicatorMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ic *IndicatorCreate) SetCreateTime(t time.Time) *IndicatorCreate {
	ic.mutation.SetCreateTime(t)
	return ic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ic *IndicatorCreate) SetNillableCreateTime(t *time.Time) *IndicatorCreate {
	if t != nil {
		ic.SetCreateTime(*t)
	}
	return ic
}

// SetUpdateTime sets the "update_time" field.
func (ic *IndicatorCreate) SetUpdateTime(t time.Time) *IndicatorCreate {
	ic.mutation.SetUpdateTime(t)
	return ic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ic *IndicatorCreate) SetNillableUpdateTime(t *time.Time) *IndicatorCreate {
	if t != nil {
		ic.SetUpdateTime(*t)
	}
	return ic
}

// SetCode sets the "code" field.
func (ic *IndicatorCreate) SetCode(s string) *IndicatorCreate {
	ic.mutation.SetCode(s)
	return ic
}

// SetTitle sets the "title" field.
func (ic *IndicatorCreate) SetTitle(s string) *IndicatorCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *IndicatorCreate) SetDescription(s string) *IndicatorCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ic *IndicatorCreate) SetNillableDescription(s *string) *IndicatorCreate {
	if s != nil {
		ic.SetDescription(*s)
	}
	return ic
}

// SetActive sets the "active" field.
func (ic *IndicatorCreate) SetActive(b bool) *IndicatorCreate {
	ic.mutation.SetActive(b)
	return ic
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ic *IndicatorCreate) SetNillableActive(b *bool) *IndicatorCreate {
	if b != nil {
		ic.SetActive(*b)
	}
	return ic
}

// SetBuiltIn sets the "built_in" field.
func (ic *IndicatorCreate) SetBuiltIn(b bool) *IndicatorCreate {
	ic.mutation.SetBuiltIn(b)
	return ic
}

// SetNillableBuiltIn sets the "built_in" field if the given value is not nil.
func (ic *IndicatorCreate) SetNillableBuiltIn(b *bool) *IndicatorCreate {
	if b != nil {
		ic.SetBuiltIn(*b)
	}
	return ic
}

// SetExternal sets the "external" field.
func (ic *IndicatorCreate) SetExternal(b bool) *IndicatorCreate {
	ic.mutation.SetExternal(b)
	return ic
}

// SetNillableExternal sets the "external" field if the given value is not nil.
func (ic *IndicatorCreate) SetNillableExternal(b *bool) *IndicatorCreate {
	if b != nil {
		ic.SetExternal(*b)
	}
	return ic
}

// AddDatasetIDs adds the "datasets" edge to the Dataset entity by IDs.
func (ic *IndicatorCreate) AddDatasetIDs(ids ...int) *IndicatorCreate {
	ic.mutation.AddDatasetIDs(ids...)
	return ic
}

// AddDatasets adds the "datasets" edges to the Dataset entity.
func (ic *IndicatorCreate) AddDatasets(d ...*Dataset) *IndicatorCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ic.AddDatasetIDs(ids...)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (ic *IndicatorCreate) SetAuthorID(id int) *IndicatorCreate {
	ic.mutation.SetAuthorID(id)
	return ic
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (ic *IndicatorCreate) SetNillableAuthorID(id *int) *IndicatorCreate {
	if id != nil {
		ic = ic.SetAuthorID(*id)
	}
	return ic
}

// SetAuthor sets the "author" edge to the User entity.
func (ic *IndicatorCreate) SetAuthor(u *User) *IndicatorCreate {
	return ic.SetAuthorID(u.ID)
}

// SetScaleID sets the "scale" edge to the Scale entity by ID.
func (ic *IndicatorCreate) SetScaleID(id int) *IndicatorCreate {
	ic.mutation.SetScaleID(id)
	return ic
}

// SetScale sets the "scale" edge to the Scale entity.
func (ic *IndicatorCreate) SetScale(s *Scale) *IndicatorCreate {
	return ic.SetScaleID(s.ID)
}

// Mutation returns the IndicatorMutation object of the builder.
func (ic *IndicatorCreate) Mutation() *IndicatorMutation {
	return ic.mutation
}

// Save creates the Indicator in the database.
func (ic *IndicatorCreate) Save(ctx context.Context) (*Indicator, error) {
	var (
		err  error
		node *Indicator
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IndicatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IndicatorCreate) SaveX(ctx context.Context) *Indicator {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ic *IndicatorCreate) defaults() {
	if _, ok := ic.mutation.CreateTime(); !ok {
		v := indicator.DefaultCreateTime()
		ic.mutation.SetCreateTime(v)
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		v := indicator.DefaultUpdateTime()
		ic.mutation.SetUpdateTime(v)
	}
	if _, ok := ic.mutation.Active(); !ok {
		v := indicator.DefaultActive
		ic.mutation.SetActive(v)
	}
	if _, ok := ic.mutation.BuiltIn(); !ok {
		v := indicator.DefaultBuiltIn
		ic.mutation.SetBuiltIn(v)
	}
	if _, ok := ic.mutation.External(); !ok {
		v := indicator.DefaultExternal
		ic.mutation.SetExternal(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IndicatorCreate) check() error {
	if _, ok := ic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := ic.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if v, ok := ic.mutation.Code(); ok {
		if err := indicator.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	if _, ok := ic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New("ent: missing required field \"title\"")}
	}
	if v, ok := ic.mutation.Title(); ok {
		if err := indicator.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if _, ok := ic.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New("ent: missing required field \"active\"")}
	}
	if _, ok := ic.mutation.BuiltIn(); !ok {
		return &ValidationError{Name: "built_in", err: errors.New("ent: missing required field \"built_in\"")}
	}
	if _, ok := ic.mutation.External(); !ok {
		return &ValidationError{Name: "external", err: errors.New("ent: missing required field \"external\"")}
	}
	if _, ok := ic.mutation.ScaleID(); !ok {
		return &ValidationError{Name: "scale", err: errors.New("ent: missing required edge \"scale\"")}
	}
	return nil
}

func (ic *IndicatorCreate) sqlSave(ctx context.Context) (*Indicator, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ic *IndicatorCreate) createSpec() (*Indicator, *sqlgraph.CreateSpec) {
	var (
		_node = &Indicator{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: indicator.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: indicator.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: indicator.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: indicator.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ic.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: indicator.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := ic.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: indicator.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: indicator.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ic.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: indicator.FieldActive,
		})
		_node.Active = value
	}
	if value, ok := ic.mutation.BuiltIn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: indicator.FieldBuiltIn,
		})
		_node.BuiltIn = value
	}
	if value, ok := ic.mutation.External(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: indicator.FieldExternal,
		})
		_node.External = value
	}
	if nodes := ic.mutation.DatasetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   indicator.DatasetsTable,
			Columns: []string{indicator.DatasetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   indicator.AuthorTable,
			Columns: []string{indicator.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ScaleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   indicator.ScaleTable,
			Columns: []string{indicator.ScaleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IndicatorCreateBulk is the builder for creating many Indicator entities in bulk.
type IndicatorCreateBulk struct {
	config
	builders []*IndicatorCreate
}

// Save creates the Indicator entities in the database.
func (icb *IndicatorCreateBulk) Save(ctx context.Context) ([]*Indicator, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Indicator, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IndicatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IndicatorCreateBulk) SaveX(ctx context.Context) []*Indicator {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
