// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/correlation"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dataset"
)

// CorrelationCreate is the builder for creating a Correlation entity.
type CorrelationCreate struct {
	config
	mutation *CorrelationMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cc *CorrelationCreate) SetCreateTime(t time.Time) *CorrelationCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CorrelationCreate) SetNillableCreateTime(t *time.Time) *CorrelationCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CorrelationCreate) SetUpdateTime(t time.Time) *CorrelationCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CorrelationCreate) SetNillableUpdateTime(t *time.Time) *CorrelationCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetCoef sets the "coef" field.
func (cc *CorrelationCreate) SetCoef(f float64) *CorrelationCreate {
	cc.mutation.SetCoef(f)
	return cc
}

// SetP sets the "p" field.
func (cc *CorrelationCreate) SetP(f float64) *CorrelationCreate {
	cc.mutation.SetP(f)
	return cc
}

// SetR2 sets the "r2" field.
func (cc *CorrelationCreate) SetR2(f float64) *CorrelationCreate {
	cc.mutation.SetR2(f)
	return cc
}

// SetType sets the "type" field.
func (cc *CorrelationCreate) SetType(s string) *CorrelationCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetGranularity sets the "granularity" field.
func (cc *CorrelationCreate) SetGranularity(c correlation.Granularity) *CorrelationCreate {
	cc.mutation.SetGranularity(c)
	return cc
}

// SetNillableGranularity sets the "granularity" field if the given value is not nil.
func (cc *CorrelationCreate) SetNillableGranularity(c *correlation.Granularity) *CorrelationCreate {
	if c != nil {
		cc.SetGranularity(*c)
	}
	return cc
}

// SetLeftID sets the "left" edge to the Dataset entity by ID.
func (cc *CorrelationCreate) SetLeftID(id int) *CorrelationCreate {
	cc.mutation.SetLeftID(id)
	return cc
}

// SetLeft sets the "left" edge to the Dataset entity.
func (cc *CorrelationCreate) SetLeft(d *Dataset) *CorrelationCreate {
	return cc.SetLeftID(d.ID)
}

// SetRightID sets the "right" edge to the Dataset entity by ID.
func (cc *CorrelationCreate) SetRightID(id int) *CorrelationCreate {
	cc.mutation.SetRightID(id)
	return cc
}

// SetRight sets the "right" edge to the Dataset entity.
func (cc *CorrelationCreate) SetRight(d *Dataset) *CorrelationCreate {
	return cc.SetRightID(d.ID)
}

// Mutation returns the CorrelationMutation object of the builder.
func (cc *CorrelationCreate) Mutation() *CorrelationMutation {
	return cc.mutation
}

// Save creates the Correlation in the database.
func (cc *CorrelationCreate) Save(ctx context.Context) (*Correlation, error) {
	var (
		err  error
		node *Correlation
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CorrelationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CorrelationCreate) SaveX(ctx context.Context) *Correlation {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cc *CorrelationCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := correlation.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := correlation.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.Granularity(); !ok {
		v := correlation.DefaultGranularity
		cc.mutation.SetGranularity(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CorrelationCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := cc.mutation.Coef(); !ok {
		return &ValidationError{Name: "coef", err: errors.New("ent: missing required field \"coef\"")}
	}
	if _, ok := cc.mutation.P(); !ok {
		return &ValidationError{Name: "p", err: errors.New("ent: missing required field \"p\"")}
	}
	if _, ok := cc.mutation.R2(); !ok {
		return &ValidationError{Name: "r2", err: errors.New("ent: missing required field \"r2\"")}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := correlation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Granularity(); !ok {
		return &ValidationError{Name: "granularity", err: errors.New("ent: missing required field \"granularity\"")}
	}
	if v, ok := cc.mutation.Granularity(); ok {
		if err := correlation.GranularityValidator(v); err != nil {
			return &ValidationError{Name: "granularity", err: fmt.Errorf("ent: validator failed for field \"granularity\": %w", err)}
		}
	}
	if _, ok := cc.mutation.LeftID(); !ok {
		return &ValidationError{Name: "left", err: errors.New("ent: missing required edge \"left\"")}
	}
	if _, ok := cc.mutation.RightID(); !ok {
		return &ValidationError{Name: "right", err: errors.New("ent: missing required edge \"right\"")}
	}
	return nil
}

func (cc *CorrelationCreate) sqlSave(ctx context.Context) (*Correlation, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CorrelationCreate) createSpec() (*Correlation, *sqlgraph.CreateSpec) {
	var (
		_node = &Correlation{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: correlation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: correlation.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: correlation.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: correlation.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Coef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldCoef,
		})
		_node.Coef = value
	}
	if value, ok := cc.mutation.P(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldP,
		})
		_node.P = value
	}
	if value, ok := cc.mutation.R2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: correlation.FieldR2,
		})
		_node.R2 = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: correlation.FieldType,
		})
		_node.Type = value
	}
	if value, ok := cc.mutation.Granularity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: correlation.FieldGranularity,
		})
		_node.Granularity = value
	}
	if nodes := cc.mutation.LeftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   correlation.LeftTable,
			Columns: []string{correlation.LeftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.RightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   correlation.RightTable,
			Columns: []string{correlation.RightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CorrelationCreateBulk is the builder for creating many Correlation entities in bulk.
type CorrelationCreateBulk struct {
	config
	builders []*CorrelationCreate
}

// Save creates the Correlation entities in the database.
func (ccb *CorrelationCreateBulk) Save(ctx context.Context) ([]*Correlation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Correlation, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CorrelationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CorrelationCreateBulk) SaveX(ctx context.Context) []*Correlation {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
