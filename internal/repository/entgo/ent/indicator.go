// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicator"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicatorvaluealias"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/scale"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/user"
)

// Indicator is the model entity for the Indicator schema.
type Indicator struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// BuiltIn holds the value of the "built_in" field.
	BuiltIn bool `json:"built_in,omitempty"`
	// External holds the value of the "external" field.
	External bool `json:"external,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IndicatorQuery when eager-loading is set.
	Edges            IndicatorEdges `json:"edges"`
	scale_indicators *int
	user_indicators  *int
}

// IndicatorEdges holds the relations/edges for other nodes in the graph.
type IndicatorEdges struct {
	// Datasets holds the value of the datasets edge.
	Datasets []*Dataset `json:"datasets,omitempty"`
	// IndicatorValueAlias holds the value of the indicator_value_alias edge.
	IndicatorValueAlias *IndicatorValueAlias `json:"indicator_value_alias,omitempty"`
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// Scale holds the value of the scale edge.
	Scale *Scale `json:"scale,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DatasetsOrErr returns the Datasets value or an error if the edge
// was not loaded in eager-loading.
func (e IndicatorEdges) DatasetsOrErr() ([]*Dataset, error) {
	if e.loadedTypes[0] {
		return e.Datasets, nil
	}
	return nil, &NotLoadedError{edge: "datasets"}
}

// IndicatorValueAliasOrErr returns the IndicatorValueAlias value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IndicatorEdges) IndicatorValueAliasOrErr() (*IndicatorValueAlias, error) {
	if e.loadedTypes[1] {
		if e.IndicatorValueAlias == nil {
			// The edge indicator_value_alias was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: indicatorvaluealias.Label}
		}
		return e.IndicatorValueAlias, nil
	}
	return nil, &NotLoadedError{edge: "indicator_value_alias"}
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IndicatorEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// ScaleOrErr returns the Scale value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IndicatorEdges) ScaleOrErr() (*Scale, error) {
	if e.loadedTypes[3] {
		if e.Scale == nil {
			// The edge scale was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: scale.Label}
		}
		return e.Scale, nil
	}
	return nil, &NotLoadedError{edge: "scale"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Indicator) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case indicator.FieldActive, indicator.FieldBuiltIn, indicator.FieldExternal:
			values[i] = &sql.NullBool{}
		case indicator.FieldID:
			values[i] = &sql.NullInt64{}
		case indicator.FieldCode, indicator.FieldTitle, indicator.FieldDescription:
			values[i] = &sql.NullString{}
		case indicator.FieldCreateTime, indicator.FieldUpdateTime:
			values[i] = &sql.NullTime{}
		case indicator.ForeignKeys[0]: // scale_indicators
			values[i] = &sql.NullInt64{}
		case indicator.ForeignKeys[1]: // user_indicators
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Indicator", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Indicator fields.
func (i *Indicator) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case indicator.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case indicator.FieldCreateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[j])
			} else if value.Valid {
				i.CreateTime = value.Time
			}
		case indicator.FieldUpdateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[j])
			} else if value.Valid {
				i.UpdateTime = value.Time
			}
		case indicator.FieldCode:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[j])
			} else if value.Valid {
				i.Code = value.String
			}
		case indicator.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case indicator.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case indicator.FieldActive:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[j])
			} else if value.Valid {
				i.Active = value.Bool
			}
		case indicator.FieldBuiltIn:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field built_in", values[j])
			} else if value.Valid {
				i.BuiltIn = value.Bool
			}
		case indicator.FieldExternal:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field external", values[j])
			} else if value.Valid {
				i.External = value.Bool
			}
		case indicator.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field scale_indicators", value)
			} else if value.Valid {
				i.scale_indicators = new(int)
				*i.scale_indicators = int(value.Int64)
			}
		case indicator.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_indicators", value)
			} else if value.Valid {
				i.user_indicators = new(int)
				*i.user_indicators = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDatasets queries the "datasets" edge of the Indicator entity.
func (i *Indicator) QueryDatasets() *DatasetQuery {
	return (&IndicatorClient{config: i.config}).QueryDatasets(i)
}

// QueryIndicatorValueAlias queries the "indicator_value_alias" edge of the Indicator entity.
func (i *Indicator) QueryIndicatorValueAlias() *IndicatorValueAliasQuery {
	return (&IndicatorClient{config: i.config}).QueryIndicatorValueAlias(i)
}

// QueryAuthor queries the "author" edge of the Indicator entity.
func (i *Indicator) QueryAuthor() *UserQuery {
	return (&IndicatorClient{config: i.config}).QueryAuthor(i)
}

// QueryScale queries the "scale" edge of the Indicator entity.
func (i *Indicator) QueryScale() *ScaleQuery {
	return (&IndicatorClient{config: i.config}).QueryScale(i)
}

// Update returns a builder for updating this Indicator.
// Note that you need to call Indicator.Unwrap() before calling this method if this Indicator
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Indicator) Update() *IndicatorUpdateOne {
	return (&IndicatorClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Indicator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Indicator) Unwrap() *Indicator {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Indicator is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Indicator) String() string {
	var builder strings.Builder
	builder.WriteString("Indicator(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(i.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(i.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", code=")
	builder.WriteString(i.Code)
	builder.WriteString(", title=")
	builder.WriteString(i.Title)
	builder.WriteString(", description=")
	builder.WriteString(i.Description)
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", i.Active))
	builder.WriteString(", built_in=")
	builder.WriteString(fmt.Sprintf("%v", i.BuiltIn))
	builder.WriteString(", external=")
	builder.WriteString(fmt.Sprintf("%v", i.External))
	builder.WriteByte(')')
	return builder.String()
}

// Indicators is a parsable slice of Indicator.
type Indicators []*Indicator

func (i Indicators) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
