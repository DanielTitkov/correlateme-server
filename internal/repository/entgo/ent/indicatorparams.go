// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/correlateme-server/internal/domain"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicator"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicatorparams"
)

// IndicatorParams is the model entity for the IndicatorParams schema.
type IndicatorParams struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ValueMapping holds the value of the "value_mapping" field.
	ValueMapping map[string]string `json:"value_mapping,omitempty"`
	// ValueParams holds the value of the "value_params" field.
	ValueParams domain.IndicatorValueParams `json:"value_params,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IndicatorParamsQuery when eager-loading is set.
	Edges                      IndicatorParamsEdges `json:"edges"`
	indicator_indicator_params *int
}

// IndicatorParamsEdges holds the relations/edges for other nodes in the graph.
type IndicatorParamsEdges struct {
	// Indicator holds the value of the indicator edge.
	Indicator *Indicator `json:"indicator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IndicatorOrErr returns the Indicator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IndicatorParamsEdges) IndicatorOrErr() (*Indicator, error) {
	if e.loadedTypes[0] {
		if e.Indicator == nil {
			// The edge indicator was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: indicator.Label}
		}
		return e.Indicator, nil
	}
	return nil, &NotLoadedError{edge: "indicator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IndicatorParams) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case indicatorparams.FieldValueMapping, indicatorparams.FieldValueParams:
			values[i] = &[]byte{}
		case indicatorparams.FieldID:
			values[i] = &sql.NullInt64{}
		case indicatorparams.ForeignKeys[0]: // indicator_indicator_params
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type IndicatorParams", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IndicatorParams fields.
func (ip *IndicatorParams) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case indicatorparams.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ip.ID = int(value.Int64)
		case indicatorparams.FieldValueMapping:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field value_mapping", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ip.ValueMapping); err != nil {
					return fmt.Errorf("unmarshal field value_mapping: %v", err)
				}
			}
		case indicatorparams.FieldValueParams:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field value_params", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ip.ValueParams); err != nil {
					return fmt.Errorf("unmarshal field value_params: %v", err)
				}
			}
		case indicatorparams.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field indicator_indicator_params", value)
			} else if value.Valid {
				ip.indicator_indicator_params = new(int)
				*ip.indicator_indicator_params = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryIndicator queries the "indicator" edge of the IndicatorParams entity.
func (ip *IndicatorParams) QueryIndicator() *IndicatorQuery {
	return (&IndicatorParamsClient{config: ip.config}).QueryIndicator(ip)
}

// Update returns a builder for updating this IndicatorParams.
// Note that you need to call IndicatorParams.Unwrap() before calling this method if this IndicatorParams
// was returned from a transaction, and the transaction was committed or rolled back.
func (ip *IndicatorParams) Update() *IndicatorParamsUpdateOne {
	return (&IndicatorParamsClient{config: ip.config}).UpdateOne(ip)
}

// Unwrap unwraps the IndicatorParams entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ip *IndicatorParams) Unwrap() *IndicatorParams {
	tx, ok := ip.config.driver.(*txDriver)
	if !ok {
		panic("ent: IndicatorParams is not a transactional entity")
	}
	ip.config.driver = tx.drv
	return ip
}

// String implements the fmt.Stringer.
func (ip *IndicatorParams) String() string {
	var builder strings.Builder
	builder.WriteString("IndicatorParams(")
	builder.WriteString(fmt.Sprintf("id=%v", ip.ID))
	builder.WriteString(", value_mapping=")
	builder.WriteString(fmt.Sprintf("%v", ip.ValueMapping))
	builder.WriteString(", value_params=")
	builder.WriteString(fmt.Sprintf("%v", ip.ValueParams))
	builder.WriteByte(')')
	return builder.String()
}

// IndicatorParamsSlice is a parsable slice of IndicatorParams.
type IndicatorParamsSlice []*IndicatorParams

func (ip IndicatorParamsSlice) config(cfg config) {
	for _i := range ip {
		ip[_i].config = cfg
	}
}
