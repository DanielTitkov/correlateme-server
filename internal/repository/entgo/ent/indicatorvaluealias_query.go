// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicator"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicatorvaluealias"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/predicate"
)

// IndicatorValueAliasQuery is the builder for querying IndicatorValueAlias entities.
type IndicatorValueAliasQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.IndicatorValueAlias
	// eager-loading edges.
	withIndicator *IndicatorQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IndicatorValueAliasQuery builder.
func (ivaq *IndicatorValueAliasQuery) Where(ps ...predicate.IndicatorValueAlias) *IndicatorValueAliasQuery {
	ivaq.predicates = append(ivaq.predicates, ps...)
	return ivaq
}

// Limit adds a limit step to the query.
func (ivaq *IndicatorValueAliasQuery) Limit(limit int) *IndicatorValueAliasQuery {
	ivaq.limit = &limit
	return ivaq
}

// Offset adds an offset step to the query.
func (ivaq *IndicatorValueAliasQuery) Offset(offset int) *IndicatorValueAliasQuery {
	ivaq.offset = &offset
	return ivaq
}

// Order adds an order step to the query.
func (ivaq *IndicatorValueAliasQuery) Order(o ...OrderFunc) *IndicatorValueAliasQuery {
	ivaq.order = append(ivaq.order, o...)
	return ivaq
}

// QueryIndicator chains the current query on the "indicator" edge.
func (ivaq *IndicatorValueAliasQuery) QueryIndicator() *IndicatorQuery {
	query := &IndicatorQuery{config: ivaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ivaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ivaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(indicatorvaluealias.Table, indicatorvaluealias.FieldID, selector),
			sqlgraph.To(indicator.Table, indicator.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, indicatorvaluealias.IndicatorTable, indicatorvaluealias.IndicatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(ivaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IndicatorValueAlias entity from the query.
// Returns a *NotFoundError when no IndicatorValueAlias was found.
func (ivaq *IndicatorValueAliasQuery) First(ctx context.Context) (*IndicatorValueAlias, error) {
	nodes, err := ivaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{indicatorvaluealias.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ivaq *IndicatorValueAliasQuery) FirstX(ctx context.Context) *IndicatorValueAlias {
	node, err := ivaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IndicatorValueAlias ID from the query.
// Returns a *NotFoundError when no IndicatorValueAlias ID was found.
func (ivaq *IndicatorValueAliasQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ivaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{indicatorvaluealias.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ivaq *IndicatorValueAliasQuery) FirstIDX(ctx context.Context) int {
	id, err := ivaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IndicatorValueAlias entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one IndicatorValueAlias entity is not found.
// Returns a *NotFoundError when no IndicatorValueAlias entities are found.
func (ivaq *IndicatorValueAliasQuery) Only(ctx context.Context) (*IndicatorValueAlias, error) {
	nodes, err := ivaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{indicatorvaluealias.Label}
	default:
		return nil, &NotSingularError{indicatorvaluealias.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ivaq *IndicatorValueAliasQuery) OnlyX(ctx context.Context) *IndicatorValueAlias {
	node, err := ivaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IndicatorValueAlias ID in the query.
// Returns a *NotSingularError when exactly one IndicatorValueAlias ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ivaq *IndicatorValueAliasQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ivaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{indicatorvaluealias.Label}
	default:
		err = &NotSingularError{indicatorvaluealias.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ivaq *IndicatorValueAliasQuery) OnlyIDX(ctx context.Context) int {
	id, err := ivaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IndicatorValueAliasSlice.
func (ivaq *IndicatorValueAliasQuery) All(ctx context.Context) ([]*IndicatorValueAlias, error) {
	if err := ivaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ivaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ivaq *IndicatorValueAliasQuery) AllX(ctx context.Context) []*IndicatorValueAlias {
	nodes, err := ivaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IndicatorValueAlias IDs.
func (ivaq *IndicatorValueAliasQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ivaq.Select(indicatorvaluealias.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ivaq *IndicatorValueAliasQuery) IDsX(ctx context.Context) []int {
	ids, err := ivaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ivaq *IndicatorValueAliasQuery) Count(ctx context.Context) (int, error) {
	if err := ivaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ivaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ivaq *IndicatorValueAliasQuery) CountX(ctx context.Context) int {
	count, err := ivaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ivaq *IndicatorValueAliasQuery) Exist(ctx context.Context) (bool, error) {
	if err := ivaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ivaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ivaq *IndicatorValueAliasQuery) ExistX(ctx context.Context) bool {
	exist, err := ivaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IndicatorValueAliasQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ivaq *IndicatorValueAliasQuery) Clone() *IndicatorValueAliasQuery {
	if ivaq == nil {
		return nil
	}
	return &IndicatorValueAliasQuery{
		config:        ivaq.config,
		limit:         ivaq.limit,
		offset:        ivaq.offset,
		order:         append([]OrderFunc{}, ivaq.order...),
		predicates:    append([]predicate.IndicatorValueAlias{}, ivaq.predicates...),
		withIndicator: ivaq.withIndicator.Clone(),
		// clone intermediate query.
		sql:  ivaq.sql.Clone(),
		path: ivaq.path,
	}
}

// WithIndicator tells the query-builder to eager-load the nodes that are connected to
// the "indicator" edge. The optional arguments are used to configure the query builder of the edge.
func (ivaq *IndicatorValueAliasQuery) WithIndicator(opts ...func(*IndicatorQuery)) *IndicatorValueAliasQuery {
	query := &IndicatorQuery{config: ivaq.config}
	for _, opt := range opts {
		opt(query)
	}
	ivaq.withIndicator = query
	return ivaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ValueMapping map[float64]string `json:"value_mapping,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IndicatorValueAlias.Query().
//		GroupBy(indicatorvaluealias.FieldValueMapping).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ivaq *IndicatorValueAliasQuery) GroupBy(field string, fields ...string) *IndicatorValueAliasGroupBy {
	group := &IndicatorValueAliasGroupBy{config: ivaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ivaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ivaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ValueMapping map[float64]string `json:"value_mapping,omitempty"`
//	}
//
//	client.IndicatorValueAlias.Query().
//		Select(indicatorvaluealias.FieldValueMapping).
//		Scan(ctx, &v)
//
func (ivaq *IndicatorValueAliasQuery) Select(field string, fields ...string) *IndicatorValueAliasSelect {
	ivaq.fields = append([]string{field}, fields...)
	return &IndicatorValueAliasSelect{IndicatorValueAliasQuery: ivaq}
}

func (ivaq *IndicatorValueAliasQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ivaq.fields {
		if !indicatorvaluealias.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ivaq.path != nil {
		prev, err := ivaq.path(ctx)
		if err != nil {
			return err
		}
		ivaq.sql = prev
	}
	return nil
}

func (ivaq *IndicatorValueAliasQuery) sqlAll(ctx context.Context) ([]*IndicatorValueAlias, error) {
	var (
		nodes       = []*IndicatorValueAlias{}
		withFKs     = ivaq.withFKs
		_spec       = ivaq.querySpec()
		loadedTypes = [1]bool{
			ivaq.withIndicator != nil,
		}
	)
	if ivaq.withIndicator != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, indicatorvaluealias.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &IndicatorValueAlias{config: ivaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ivaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ivaq.withIndicator; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*IndicatorValueAlias)
		for i := range nodes {
			if fk := nodes[i].indicator_indicator_value_alias; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(indicator.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "indicator_indicator_value_alias" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Indicator = n
			}
		}
	}

	return nodes, nil
}

func (ivaq *IndicatorValueAliasQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ivaq.querySpec()
	return sqlgraph.CountNodes(ctx, ivaq.driver, _spec)
}

func (ivaq *IndicatorValueAliasQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ivaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (ivaq *IndicatorValueAliasQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   indicatorvaluealias.Table,
			Columns: indicatorvaluealias.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: indicatorvaluealias.FieldID,
			},
		},
		From:   ivaq.sql,
		Unique: true,
	}
	if fields := ivaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, indicatorvaluealias.FieldID)
		for i := range fields {
			if fields[i] != indicatorvaluealias.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ivaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ivaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ivaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ivaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, indicatorvaluealias.ValidColumn)
			}
		}
	}
	return _spec
}

func (ivaq *IndicatorValueAliasQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ivaq.driver.Dialect())
	t1 := builder.Table(indicatorvaluealias.Table)
	selector := builder.Select(t1.Columns(indicatorvaluealias.Columns...)...).From(t1)
	if ivaq.sql != nil {
		selector = ivaq.sql
		selector.Select(selector.Columns(indicatorvaluealias.Columns...)...)
	}
	for _, p := range ivaq.predicates {
		p(selector)
	}
	for _, p := range ivaq.order {
		p(selector, indicatorvaluealias.ValidColumn)
	}
	if offset := ivaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ivaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IndicatorValueAliasGroupBy is the group-by builder for IndicatorValueAlias entities.
type IndicatorValueAliasGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ivagb *IndicatorValueAliasGroupBy) Aggregate(fns ...AggregateFunc) *IndicatorValueAliasGroupBy {
	ivagb.fns = append(ivagb.fns, fns...)
	return ivagb
}

// Scan applies the group-by query and scans the result into the given value.
func (ivagb *IndicatorValueAliasGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ivagb.path(ctx)
	if err != nil {
		return err
	}
	ivagb.sql = query
	return ivagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ivagb *IndicatorValueAliasGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ivagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ivagb *IndicatorValueAliasGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ivagb.fields) > 1 {
		return nil, errors.New("ent: IndicatorValueAliasGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ivagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ivagb *IndicatorValueAliasGroupBy) StringsX(ctx context.Context) []string {
	v, err := ivagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ivagb *IndicatorValueAliasGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ivagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{indicatorvaluealias.Label}
	default:
		err = fmt.Errorf("ent: IndicatorValueAliasGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ivagb *IndicatorValueAliasGroupBy) StringX(ctx context.Context) string {
	v, err := ivagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ivagb *IndicatorValueAliasGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ivagb.fields) > 1 {
		return nil, errors.New("ent: IndicatorValueAliasGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ivagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ivagb *IndicatorValueAliasGroupBy) IntsX(ctx context.Context) []int {
	v, err := ivagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ivagb *IndicatorValueAliasGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ivagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{indicatorvaluealias.Label}
	default:
		err = fmt.Errorf("ent: IndicatorValueAliasGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ivagb *IndicatorValueAliasGroupBy) IntX(ctx context.Context) int {
	v, err := ivagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ivagb *IndicatorValueAliasGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ivagb.fields) > 1 {
		return nil, errors.New("ent: IndicatorValueAliasGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ivagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ivagb *IndicatorValueAliasGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ivagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ivagb *IndicatorValueAliasGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ivagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{indicatorvaluealias.Label}
	default:
		err = fmt.Errorf("ent: IndicatorValueAliasGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ivagb *IndicatorValueAliasGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ivagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ivagb *IndicatorValueAliasGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ivagb.fields) > 1 {
		return nil, errors.New("ent: IndicatorValueAliasGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ivagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ivagb *IndicatorValueAliasGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ivagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ivagb *IndicatorValueAliasGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ivagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{indicatorvaluealias.Label}
	default:
		err = fmt.Errorf("ent: IndicatorValueAliasGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ivagb *IndicatorValueAliasGroupBy) BoolX(ctx context.Context) bool {
	v, err := ivagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ivagb *IndicatorValueAliasGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ivagb.fields {
		if !indicatorvaluealias.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ivagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ivagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ivagb *IndicatorValueAliasGroupBy) sqlQuery() *sql.Selector {
	selector := ivagb.sql
	columns := make([]string, 0, len(ivagb.fields)+len(ivagb.fns))
	columns = append(columns, ivagb.fields...)
	for _, fn := range ivagb.fns {
		columns = append(columns, fn(selector, indicatorvaluealias.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(ivagb.fields...)
}

// IndicatorValueAliasSelect is the builder for selecting fields of IndicatorValueAlias entities.
type IndicatorValueAliasSelect struct {
	*IndicatorValueAliasQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ivas *IndicatorValueAliasSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ivas.prepareQuery(ctx); err != nil {
		return err
	}
	ivas.sql = ivas.IndicatorValueAliasQuery.sqlQuery(ctx)
	return ivas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ivas *IndicatorValueAliasSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ivas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ivas *IndicatorValueAliasSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ivas.fields) > 1 {
		return nil, errors.New("ent: IndicatorValueAliasSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ivas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ivas *IndicatorValueAliasSelect) StringsX(ctx context.Context) []string {
	v, err := ivas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ivas *IndicatorValueAliasSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ivas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{indicatorvaluealias.Label}
	default:
		err = fmt.Errorf("ent: IndicatorValueAliasSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ivas *IndicatorValueAliasSelect) StringX(ctx context.Context) string {
	v, err := ivas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ivas *IndicatorValueAliasSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ivas.fields) > 1 {
		return nil, errors.New("ent: IndicatorValueAliasSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ivas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ivas *IndicatorValueAliasSelect) IntsX(ctx context.Context) []int {
	v, err := ivas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ivas *IndicatorValueAliasSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ivas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{indicatorvaluealias.Label}
	default:
		err = fmt.Errorf("ent: IndicatorValueAliasSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ivas *IndicatorValueAliasSelect) IntX(ctx context.Context) int {
	v, err := ivas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ivas *IndicatorValueAliasSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ivas.fields) > 1 {
		return nil, errors.New("ent: IndicatorValueAliasSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ivas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ivas *IndicatorValueAliasSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ivas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ivas *IndicatorValueAliasSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ivas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{indicatorvaluealias.Label}
	default:
		err = fmt.Errorf("ent: IndicatorValueAliasSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ivas *IndicatorValueAliasSelect) Float64X(ctx context.Context) float64 {
	v, err := ivas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ivas *IndicatorValueAliasSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ivas.fields) > 1 {
		return nil, errors.New("ent: IndicatorValueAliasSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ivas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ivas *IndicatorValueAliasSelect) BoolsX(ctx context.Context) []bool {
	v, err := ivas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ivas *IndicatorValueAliasSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ivas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{indicatorvaluealias.Label}
	default:
		err = fmt.Errorf("ent: IndicatorValueAliasSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ivas *IndicatorValueAliasSelect) BoolX(ctx context.Context) bool {
	v, err := ivas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ivas *IndicatorValueAliasSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ivas.sqlQuery().Query()
	if err := ivas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ivas *IndicatorValueAliasSelect) sqlQuery() sql.Querier {
	selector := ivas.sql
	selector.Select(selector.Columns(ivas.fields...)...)
	return selector
}
