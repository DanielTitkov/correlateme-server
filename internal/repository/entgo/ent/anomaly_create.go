// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/anomaly"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjobinstance"
)

// AnomalyCreate is the builder for creating a Anomaly entity.
type AnomalyCreate struct {
	config
	mutation *AnomalyMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ac *AnomalyCreate) SetCreateTime(t time.Time) *AnomalyCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AnomalyCreate) SetNillableCreateTime(t *time.Time) *AnomalyCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AnomalyCreate) SetUpdateTime(t time.Time) *AnomalyCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AnomalyCreate) SetNillableUpdateTime(t *time.Time) *AnomalyCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *AnomalyCreate) SetType(s string) *AnomalyCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetValue sets the "value" field.
func (ac *AnomalyCreate) SetValue(f float64) *AnomalyCreate {
	ac.mutation.SetValue(f)
	return ac
}

// SetProcessed sets the "processed" field.
func (ac *AnomalyCreate) SetProcessed(b bool) *AnomalyCreate {
	ac.mutation.SetProcessed(b)
	return ac
}

// SetNillableProcessed sets the "processed" field if the given value is not nil.
func (ac *AnomalyCreate) SetNillableProcessed(b *bool) *AnomalyCreate {
	if b != nil {
		ac.SetProcessed(*b)
	}
	return ac
}

// SetPeriodStart sets the "period_start" field.
func (ac *AnomalyCreate) SetPeriodStart(t time.Time) *AnomalyCreate {
	ac.mutation.SetPeriodStart(t)
	return ac
}

// SetPeriodEnd sets the "period_end" field.
func (ac *AnomalyCreate) SetPeriodEnd(t time.Time) *AnomalyCreate {
	ac.mutation.SetPeriodEnd(t)
	return ac
}

// SetDetectionJobInstanceID sets the "detection_job_instance" edge to the DetectionJobInstance entity by ID.
func (ac *AnomalyCreate) SetDetectionJobInstanceID(id int) *AnomalyCreate {
	ac.mutation.SetDetectionJobInstanceID(id)
	return ac
}

// SetDetectionJobInstance sets the "detection_job_instance" edge to the DetectionJobInstance entity.
func (ac *AnomalyCreate) SetDetectionJobInstance(d *DetectionJobInstance) *AnomalyCreate {
	return ac.SetDetectionJobInstanceID(d.ID)
}

// Mutation returns the AnomalyMutation object of the builder.
func (ac *AnomalyCreate) Mutation() *AnomalyMutation {
	return ac.mutation
}

// Save creates the Anomaly in the database.
func (ac *AnomalyCreate) Save(ctx context.Context) (*Anomaly, error) {
	var (
		err  error
		node *Anomaly
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnomalyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnomalyCreate) SaveX(ctx context.Context) *Anomaly {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ac *AnomalyCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := anomaly.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := anomaly.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.Processed(); !ok {
		v := anomaly.DefaultProcessed
		ac.mutation.SetProcessed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AnomalyCreate) check() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := anomaly.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := ac.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New("ent: missing required field \"value\"")}
	}
	if _, ok := ac.mutation.Processed(); !ok {
		return &ValidationError{Name: "processed", err: errors.New("ent: missing required field \"processed\"")}
	}
	if _, ok := ac.mutation.PeriodStart(); !ok {
		return &ValidationError{Name: "period_start", err: errors.New("ent: missing required field \"period_start\"")}
	}
	if _, ok := ac.mutation.PeriodEnd(); !ok {
		return &ValidationError{Name: "period_end", err: errors.New("ent: missing required field \"period_end\"")}
	}
	if _, ok := ac.mutation.DetectionJobInstanceID(); !ok {
		return &ValidationError{Name: "detection_job_instance", err: errors.New("ent: missing required edge \"detection_job_instance\"")}
	}
	return nil
}

func (ac *AnomalyCreate) sqlSave(ctx context.Context) (*Anomaly, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AnomalyCreate) createSpec() (*Anomaly, *sqlgraph.CreateSpec) {
	var (
		_node = &Anomaly{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: anomaly.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: anomaly.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: anomaly.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: anomaly.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: anomaly.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ac.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: anomaly.FieldValue,
		})
		_node.Value = value
	}
	if value, ok := ac.mutation.Processed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: anomaly.FieldProcessed,
		})
		_node.Processed = value
	}
	if value, ok := ac.mutation.PeriodStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: anomaly.FieldPeriodStart,
		})
		_node.PeriodStart = value
	}
	if value, ok := ac.mutation.PeriodEnd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: anomaly.FieldPeriodEnd,
		})
		_node.PeriodEnd = value
	}
	if nodes := ac.mutation.DetectionJobInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   anomaly.DetectionJobInstanceTable,
			Columns: []string{anomaly.DetectionJobInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: detectionjobinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AnomalyCreateBulk is the builder for creating many Anomaly entities in bulk.
type AnomalyCreateBulk struct {
	config
	builders []*AnomalyCreate
}

// Save creates the Anomaly entities in the database.
func (acb *AnomalyCreateBulk) Save(ctx context.Context) ([]*Anomaly, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Anomaly, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnomalyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AnomalyCreateBulk) SaveX(ctx context.Context) []*Anomaly {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
