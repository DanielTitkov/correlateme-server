// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/detectionjob"
)

// DetectionJob is the model entity for the DetectionJob schema.
type DetectionJob struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Schedule holds the value of the "schedule" field.
	Schedule *string `json:"schedule,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// SiteID holds the value of the "site_id" field.
	SiteID string `json:"site_id,omitempty"`
	// Metric holds the value of the "metric" field.
	Metric string `json:"metric,omitempty"`
	// Attribute holds the value of the "attribute" field.
	Attribute string `json:"attribute,omitempty"`
	// TimeAgo holds the value of the "time_ago" field.
	TimeAgo string `json:"time_ago,omitempty"`
	// TimeStep holds the value of the "time_step" field.
	TimeStep string `json:"time_step,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DetectionJobQuery when eager-loading is set.
	Edges DetectionJobEdges `json:"edges"`
}

// DetectionJobEdges holds the relations/edges for other nodes in the graph.
type DetectionJobEdges struct {
	// Instance holds the value of the instance edge.
	Instance []*DetectionJobInstance `json:"instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InstanceOrErr returns the Instance value or an error if the edge
// was not loaded in eager-loading.
func (e DetectionJobEdges) InstanceOrErr() ([]*DetectionJobInstance, error) {
	if e.loadedTypes[0] {
		return e.Instance, nil
	}
	return nil, &NotLoadedError{edge: "instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DetectionJob) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case detectionjob.FieldID:
			values[i] = &sql.NullInt64{}
		case detectionjob.FieldSchedule, detectionjob.FieldMethod, detectionjob.FieldSiteID, detectionjob.FieldMetric, detectionjob.FieldAttribute, detectionjob.FieldTimeAgo, detectionjob.FieldTimeStep, detectionjob.FieldDescription:
			values[i] = &sql.NullString{}
		case detectionjob.FieldCreateTime, detectionjob.FieldUpdateTime:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type DetectionJob", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DetectionJob fields.
func (dj *DetectionJob) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case detectionjob.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dj.ID = int(value.Int64)
		case detectionjob.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dj.CreateTime = value.Time
			}
		case detectionjob.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dj.UpdateTime = value.Time
			}
		case detectionjob.FieldSchedule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schedule", values[i])
			} else if value.Valid {
				dj.Schedule = new(string)
				*dj.Schedule = value.String
			}
		case detectionjob.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				dj.Method = value.String
			}
		case detectionjob.FieldSiteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_id", values[i])
			} else if value.Valid {
				dj.SiteID = value.String
			}
		case detectionjob.FieldMetric:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metric", values[i])
			} else if value.Valid {
				dj.Metric = value.String
			}
		case detectionjob.FieldAttribute:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attribute", values[i])
			} else if value.Valid {
				dj.Attribute = value.String
			}
		case detectionjob.FieldTimeAgo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time_ago", values[i])
			} else if value.Valid {
				dj.TimeAgo = value.String
			}
		case detectionjob.FieldTimeStep:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time_step", values[i])
			} else if value.Valid {
				dj.TimeStep = value.String
			}
		case detectionjob.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dj.Description = value.String
			}
		}
	}
	return nil
}

// QueryInstance queries the "instance" edge of the DetectionJob entity.
func (dj *DetectionJob) QueryInstance() *DetectionJobInstanceQuery {
	return (&DetectionJobClient{config: dj.config}).QueryInstance(dj)
}

// Update returns a builder for updating this DetectionJob.
// Note that you need to call DetectionJob.Unwrap() before calling this method if this DetectionJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (dj *DetectionJob) Update() *DetectionJobUpdateOne {
	return (&DetectionJobClient{config: dj.config}).UpdateOne(dj)
}

// Unwrap unwraps the DetectionJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dj *DetectionJob) Unwrap() *DetectionJob {
	tx, ok := dj.config.driver.(*txDriver)
	if !ok {
		panic("ent: DetectionJob is not a transactional entity")
	}
	dj.config.driver = tx.drv
	return dj
}

// String implements the fmt.Stringer.
func (dj *DetectionJob) String() string {
	var builder strings.Builder
	builder.WriteString("DetectionJob(")
	builder.WriteString(fmt.Sprintf("id=%v", dj.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(dj.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(dj.UpdateTime.Format(time.ANSIC))
	if v := dj.Schedule; v != nil {
		builder.WriteString(", schedule=")
		builder.WriteString(*v)
	}
	builder.WriteString(", method=")
	builder.WriteString(dj.Method)
	builder.WriteString(", site_id=")
	builder.WriteString(dj.SiteID)
	builder.WriteString(", metric=")
	builder.WriteString(dj.Metric)
	builder.WriteString(", attribute=")
	builder.WriteString(dj.Attribute)
	builder.WriteString(", time_ago=")
	builder.WriteString(dj.TimeAgo)
	builder.WriteString(", time_step=")
	builder.WriteString(dj.TimeStep)
	builder.WriteString(", description=")
	builder.WriteString(dj.Description)
	builder.WriteByte(')')
	return builder.String()
}

// DetectionJobs is a parsable slice of DetectionJob.
type DetectionJobs []*DetectionJob

func (dj DetectionJobs) config(cfg config) {
	for _i := range dj {
		dj[_i].config = cfg
	}
}
