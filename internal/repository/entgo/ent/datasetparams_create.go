// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/domain"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/dataset"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/datasetparams"
)

// DatasetParamsCreate is the builder for creating a DatasetParams entity.
type DatasetParamsCreate struct {
	config
	mutation *DatasetParamsMutation
	hooks    []Hook
}

// SetStyle sets the "style" field.
func (dpc *DatasetParamsCreate) SetStyle(ds domain.DatasetStyle) *DatasetParamsCreate {
	dpc.mutation.SetStyle(ds)
	return dpc
}

// SetAggregation sets the "aggregation" field.
func (dpc *DatasetParamsCreate) SetAggregation(da domain.DatasetAggregation) *DatasetParamsCreate {
	dpc.mutation.SetAggregation(da)
	return dpc
}

// SetDatasetID sets the "dataset" edge to the Dataset entity by ID.
func (dpc *DatasetParamsCreate) SetDatasetID(id int) *DatasetParamsCreate {
	dpc.mutation.SetDatasetID(id)
	return dpc
}

// SetDataset sets the "dataset" edge to the Dataset entity.
func (dpc *DatasetParamsCreate) SetDataset(d *Dataset) *DatasetParamsCreate {
	return dpc.SetDatasetID(d.ID)
}

// Mutation returns the DatasetParamsMutation object of the builder.
func (dpc *DatasetParamsCreate) Mutation() *DatasetParamsMutation {
	return dpc.mutation
}

// Save creates the DatasetParams in the database.
func (dpc *DatasetParamsCreate) Save(ctx context.Context) (*DatasetParams, error) {
	var (
		err  error
		node *DatasetParams
	)
	if len(dpc.hooks) == 0 {
		if err = dpc.check(); err != nil {
			return nil, err
		}
		node, err = dpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatasetParamsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpc.check(); err != nil {
				return nil, err
			}
			dpc.mutation = mutation
			node, err = dpc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dpc.hooks) - 1; i >= 0; i-- {
			mut = dpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DatasetParamsCreate) SaveX(ctx context.Context) *DatasetParams {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DatasetParamsCreate) check() error {
	if _, ok := dpc.mutation.Style(); !ok {
		return &ValidationError{Name: "style", err: errors.New("ent: missing required field \"style\"")}
	}
	if _, ok := dpc.mutation.Aggregation(); !ok {
		return &ValidationError{Name: "aggregation", err: errors.New("ent: missing required field \"aggregation\"")}
	}
	if _, ok := dpc.mutation.DatasetID(); !ok {
		return &ValidationError{Name: "dataset", err: errors.New("ent: missing required edge \"dataset\"")}
	}
	return nil
}

func (dpc *DatasetParamsCreate) sqlSave(ctx context.Context) (*DatasetParams, error) {
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dpc *DatasetParamsCreate) createSpec() (*DatasetParams, *sqlgraph.CreateSpec) {
	var (
		_node = &DatasetParams{config: dpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: datasetparams.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: datasetparams.FieldID,
			},
		}
	)
	if value, ok := dpc.mutation.Style(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: datasetparams.FieldStyle,
		})
		_node.Style = value
	}
	if value, ok := dpc.mutation.Aggregation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: datasetparams.FieldAggregation,
		})
		_node.Aggregation = value
	}
	if nodes := dpc.mutation.DatasetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   datasetparams.DatasetTable,
			Columns: []string{datasetparams.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DatasetParamsCreateBulk is the builder for creating many DatasetParams entities in bulk.
type DatasetParamsCreateBulk struct {
	config
	builders []*DatasetParamsCreate
}

// Save creates the DatasetParams entities in the database.
func (dpcb *DatasetParamsCreateBulk) Save(ctx context.Context) ([]*DatasetParams, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DatasetParams, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DatasetParamsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DatasetParamsCreateBulk) SaveX(ctx context.Context) []*DatasetParams {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
