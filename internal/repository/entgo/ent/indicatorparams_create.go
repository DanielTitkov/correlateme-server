// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/correlateme-server/internal/domain"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicator"
	"github.com/DanielTitkov/correlateme-server/internal/repository/entgo/ent/indicatorparams"
)

// IndicatorParamsCreate is the builder for creating a IndicatorParams entity.
type IndicatorParamsCreate struct {
	config
	mutation *IndicatorParamsMutation
	hooks    []Hook
}

// SetValueMapping sets the "value_mapping" field.
func (ipc *IndicatorParamsCreate) SetValueMapping(m map[string]string) *IndicatorParamsCreate {
	ipc.mutation.SetValueMapping(m)
	return ipc
}

// SetValueParams sets the "value_params" field.
func (ipc *IndicatorParamsCreate) SetValueParams(dvp domain.IndicatorValueParams) *IndicatorParamsCreate {
	ipc.mutation.SetValueParams(dvp)
	return ipc
}

// SetIndicatorID sets the "indicator" edge to the Indicator entity by ID.
func (ipc *IndicatorParamsCreate) SetIndicatorID(id int) *IndicatorParamsCreate {
	ipc.mutation.SetIndicatorID(id)
	return ipc
}

// SetIndicator sets the "indicator" edge to the Indicator entity.
func (ipc *IndicatorParamsCreate) SetIndicator(i *Indicator) *IndicatorParamsCreate {
	return ipc.SetIndicatorID(i.ID)
}

// Mutation returns the IndicatorParamsMutation object of the builder.
func (ipc *IndicatorParamsCreate) Mutation() *IndicatorParamsMutation {
	return ipc.mutation
}

// Save creates the IndicatorParams in the database.
func (ipc *IndicatorParamsCreate) Save(ctx context.Context) (*IndicatorParams, error) {
	var (
		err  error
		node *IndicatorParams
	)
	if len(ipc.hooks) == 0 {
		if err = ipc.check(); err != nil {
			return nil, err
		}
		node, err = ipc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IndicatorParamsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ipc.check(); err != nil {
				return nil, err
			}
			ipc.mutation = mutation
			node, err = ipc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ipc.hooks) - 1; i >= 0; i-- {
			mut = ipc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ipc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ipc *IndicatorParamsCreate) SaveX(ctx context.Context) *IndicatorParams {
	v, err := ipc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ipc *IndicatorParamsCreate) check() error {
	if _, ok := ipc.mutation.ValueParams(); !ok {
		return &ValidationError{Name: "value_params", err: errors.New("ent: missing required field \"value_params\"")}
	}
	if _, ok := ipc.mutation.IndicatorID(); !ok {
		return &ValidationError{Name: "indicator", err: errors.New("ent: missing required edge \"indicator\"")}
	}
	return nil
}

func (ipc *IndicatorParamsCreate) sqlSave(ctx context.Context) (*IndicatorParams, error) {
	_node, _spec := ipc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ipc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ipc *IndicatorParamsCreate) createSpec() (*IndicatorParams, *sqlgraph.CreateSpec) {
	var (
		_node = &IndicatorParams{config: ipc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: indicatorparams.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: indicatorparams.FieldID,
			},
		}
	)
	if value, ok := ipc.mutation.ValueMapping(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: indicatorparams.FieldValueMapping,
		})
		_node.ValueMapping = value
	}
	if value, ok := ipc.mutation.ValueParams(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: indicatorparams.FieldValueParams,
		})
		_node.ValueParams = value
	}
	if nodes := ipc.mutation.IndicatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   indicatorparams.IndicatorTable,
			Columns: []string{indicatorparams.IndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: indicator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IndicatorParamsCreateBulk is the builder for creating many IndicatorParams entities in bulk.
type IndicatorParamsCreateBulk struct {
	config
	builders []*IndicatorParamsCreate
}

// Save creates the IndicatorParams entities in the database.
func (ipcb *IndicatorParamsCreateBulk) Save(ctx context.Context) ([]*IndicatorParams, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ipcb.builders))
	nodes := make([]*IndicatorParams, len(ipcb.builders))
	mutators := make([]Mutator, len(ipcb.builders))
	for i := range ipcb.builders {
		func(i int, root context.Context) {
			builder := ipcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IndicatorParamsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ipcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ipcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ipcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ipcb *IndicatorParamsCreateBulk) SaveX(ctx context.Context) []*IndicatorParams {
	v, err := ipcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
