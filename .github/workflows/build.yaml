name: Build
on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:

jobs:

  # # lint code with golangci-lint using built-in action
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2

  #     - name: Golangci-lint
  #       uses: golangci/golangci-lint-action@v2
  #       with:
  #         # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
  #         version: v1.29

  #         # Optional: working directory, useful for monorepos
  #         # working-directory: somedir

  #         # Optional: golangci-lint command line arguments.
  #         args: --issues-exit-code=0

  #         # Optional: show only new issues if it's a pull request. The default value is `false`.
  #         # only-new-issues: true

  #         # Optional: if set to true then the action will use pre-installed Go.
  #         # skip-go-installation: true

  #         # Optional: if set to true then the action don't cache or restore ~/go/pkg.
  #         # skip-pkg-cache: true

  #         # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
  #         # skip-build-cache: true

  # # run tests
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest 
  #   steps:
  #     - name: Set up Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.13

  #     - name: Check out code
  #       uses: actions/checkout@v2

  #     - name: Test
  #       run: make test

  # # build go binary, this is actully not really needed, it just validates the code builds
  # build:
  #   name: Build
  #   runs-on: ubuntu-latest 
  #   steps:
  #     - name: Set up Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.13

  #     - name: Check out code
  #       uses: actions/checkout@v2

  #     - name: Build
  #       run: make build

  # # build docker and push it to docker registry
  # publish:
  #   name: Publish
  #   needs: [lint, build, test]
  #   runs-on: ubuntu-latest 
  #   env:
  #     LOGIN: ${{ secrets.DOCKER_LOGIN }}
  #     NAME: ${{ secrets.DOCKER_NAME }}
  #   steps:
  #     - name: Login to docker.io
  #       run:  echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin

  #     - name: Check out code
  #       uses: actions/checkout@v2
      
  #     - name: Build image
  #       run: docker build -t $LOGIN/$NAME:${GITHUB_REF:11} -f deployments/docker/Dockerfile .

  #     - name: Push image to docker.io
  #       run: docker push $LOGIN/$NAME:${GITHUB_REF:11} 

  # tell server to pull new contaner and run it
  deploy:
    name: Deploy
    # needs: [lint, build, test, publish]
    runs-on: ubuntu-latest
    env: 
      TAG: ${{ github.ref }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SECRET_KEY: ${{ secrets.APP_SECRET_KEY }}
      CONFIG_PATH: ./configs/deploy_config_111.yml
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Build deploy config
      run: make substitute_config_vars
      
    - name: Copy file via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        port: ${{ secrets.PORT }}
        password: ${{ secrets.SSH_PASSWORD }}
        source: "./configs/deploy_config_111.yml"
        target: "./app"

    - name: Execute remote command
      uses: appleboy/ssh-action@master
      with:
        script_stop: true
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        port: ${{ secrets.PORT }}
        password: ${{ secrets.SSH_PASSWORD }}
        # key: ${{ secrets.SSHKEY }}
        envs: TAG
        script: | 
          mkdir -p app
          cd app
          echo "container tag ${TAG:11}" 
          docker pull ${{ secrets.DOCKER_LOGIN }}/${{ secrets.DOCKER_NAME }}:${TAG:11}
          docker stop $(docker ps -a -q --filter name=^/${{ secrets.DOCKER_NAME }}$) || :
          docker run -p 8000:8000 -d --rm -e CONFIG_PATH=/opt/configs/deploy_config_111.yml --mount type=bind,source=$(pwd)/configs,target=/opt/configs --name=${{ secrets.DOCKER_NAME }} ${{ secrets.DOCKER_LOGIN }}/${{ secrets.DOCKER_NAME }}:${TAG:11}
          echo "all ok"